"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[450],{6029:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"tester-vs-bot","metadata":{"permalink":"/tester-vs-bot","source":"@site/blog/2023-12-31-tester-vs-bot.mdx","title":"Feel the Heartbeat of Software Testing","description":"If your approach to software testing consists of merely navigating through predefined test cases with specified inputs and expected outcomes, and your only action is to tick checkboxes without engaging in thorough testing, then you are not functioning as a tester; rather, you are akin to a bot.","date":"2023-12-31T00:00:00.000Z","formattedDate":"December 31, 2023","tags":[{"label":"testing","permalink":"/tags/testing"},{"label":"automation","permalink":"/tags/automation"}],"readingTime":2.545,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Maintainer","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"tester-vs-bot","title":"Feel the Heartbeat of Software Testing","authors":["jang"],"tags":["testing","automation"]},"unlisted":false,"nextItem":{"title":"How to become a software tester","permalink":"/how"}},"content":"> ***If your approach to software testing consists of merely navigating through predefined test cases with specified inputs and expected outcomes, and your only action is to tick checkboxes without engaging in thorough testing, then you are not functioning as a tester; rather, you are akin to a bot.***\\n\\nIn the world of software testing, there\'s a big difference between doing the bare minimum and truly understanding what you\'re testing. Imagine this: instead of really digging into the software, a tester just goes through a set list of tests, checking boxes as they go. It might look like progress, but it\'s like scratching the surface without getting to the real stuff.\\n\\n![human finger touches robot finger](/img/tester-vs-bot.jpg)\\n_Image by [geralt](https://pixabay.com/users/geralt-9301/)_\\n\\n**The Ritual**\\n\\nPicture this as a ritual: a tester follows a set path, just ticking off boxes with specific inputs and expected results. It\'s like a dance, but instead of exploring the software\'s ins and outs, it\'s more like going through the motions.\\n\\n**The Misleading Idea**\\n\\nLet\'s clear something up: just ticking boxes doesn\'t equal effective testing. It might seem like things are getting done, but it doesn\'t go deep enough to find the hidden problems in the code.\\n\\n**Going Beyond**\\n\\nSoftware testing is an art. It\'s not just about following a script; it\'s about actively thinking and engaging with the software. Real testers don\'t stick to the script \u2013 they go off the beaten path, checking every corner for potential issues.\\n\\n**More Than Just Checking Boxes**\\n\\nGood testers don\'t rely only on checkboxes in a test execution plan. They bring in critical thinking, creativity, and a deep understanding of how the software works. Thorough testing means crafting tests that go beyond the obvious, thinking ahead, and making sure every part of the software gets a good look.\\n\\n**The Danger of Robotic Testing**\\n\\nWhen testing becomes mindless checkbox ticking, it\'s like being stuck in robot mode. The line between a real tester and an automated bot starts to blur. The human touch \u2013 the ability to adapt, think creatively, and find tricky issues \u2013 disappears.\\n\\n**Conclusion: Embracing  The Quality Journey**\\n\\nIn software testing, it\'s not just about getting through a checklist. It\'s a journey, a quest to really understand what makes the software tick. Let\'s move past the routine and embrace the heart of testing \u2013 an ever-evolving process that separates the real testers from the software bots.\\n\\n:::danger The Role of Regression Tests\\n\\nWhile advocating for a holistic approach and  the importance of moving beyond checkbox testing to truly understand and engage with software, it is crucial to acknowledge the value of reliable regression tests.\\n\\n**It is the combination of thoughtful, exploratory testing and robust regression testing that forms the backbone of a comprehensive quality assurance strategy.**   \\n\\nStriking this balance ensures not only the uncovering of new issues but also the preservation of the stability and reliability of the software over time. \\n\\nBe aware to recognize the moment to introduce automation into your testing strategy as a key consideration for maintaining an effective and efficient software testing process.\\n\\n:::"},{"id":"how","metadata":{"permalink":"/how","source":"@site/blog/2022-12-01-how-i-became-a-tester.md","title":"How to become a software tester","description":"About how to become a software tester","date":"2022-12-01T00:00:00.000Z","formattedDate":"December 1, 2022","tags":[{"label":"SoftwareTesting","permalink":"/tags/software-testing"},{"label":"QualityAssurance","permalink":"/tags/quality-assurance"}],"readingTime":2.605,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Maintainer","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"how","title":"How to become a software tester","authors":["jang"],"tags":["SoftwareTesting","QualityAssurance"]},"unlisted":false,"prevItem":{"title":"Feel the Heartbeat of Software Testing","permalink":"/tester-vs-bot"}},"content":"## About how to become a software tester\\n\\nWell, you can google this and get a lot of valid answers.\\n\\nSo, this is the story, about **I** became a software tester.\\n\\nAfter successfully graduating from technical college about 15+ years ago, I was hired by a small software development company. It was specialized in software for a small market in the broadcasting sector. The software was very modular, highly configurable and rich in interfaces - either to our own modules or to third party vendors.\\n\\nMy job was to install, configure and take the software into production at the customer\'s site (within the scope of implementation projects). Furthermore, I provided remote support from the office. If errors occurred during operation, I was the first point of contact for the customer. \\n\\nAt this time there was no tester or test process in my team. Nor was there a clearly defined release process. The developers tested themselves, sent debug versions (all in one *.exe files) via email to the customer. The customer then tried it out and put the version into operation.\\n\\nThis was my first contact with a mantra, which is still with me today:\\n\\n> **\\"The customer tests himself. He knows best. He knows how it should work\\".** \\n\\nWhen I sat back in the support office in front of our web portal, I somehow got a different impression. If the customer knew how it had to work, why would he put a version into operation that caused errors after a more or even less long period being in production?\\n\\nAnd why were the customers so angry,  complaining about bad quality? After all, they had tested it themselves. With their own business processes. And found it to be suitable? Otherwise they wouldn\'t have put the version into production, right?\\n\\nI agree, the difference between \\"testing\\" and \\"trying something out\\" needs a separate post...\\n\\nIn any case, I was tired of constantly vowing better quality next time to customers. I\'m sure our customers were also tired of believing me.\\n\\nSo, this small software development team had also heard something about the concept of having independent software testing. Having tests done by a second instance (besides the developer himself) before release the software to the customer.\\n\\nI found the topic exciting. After all, it would enable me to gain even more better knowledge how the software works. I would also be more competent in answering questions when supporting. We would find errors earlier. We would better understand the customer\'s business processes. All in all, deliver better quality.\\n\\nSo that\'s how my career as a software tester started. An exciting job with a lot of build-up work and a steep learning curve. \\n\\nPS:\\n\\nTesting in a team with 5 - 6 developers is not a part-time job. And I still had the other tasks, that time. When customer start to order more projects again, I realized that the focus would be shifted.  I would have even less time for what had become the job I wanted to do in future. So I decided to say goodbye and work as a software tester from now on."}]}')}}]);