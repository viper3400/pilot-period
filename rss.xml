<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Pilot Period Blog</title>
        <link>https://www.pilot-period.org/</link>
        <description>Pilot Period Blog</description>
        <lastBuildDate>Sun, 21 Jan 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The Role of Testers in Cross-Functional Teams]]></title>
            <link>https://www.pilot-period.org/skills_before_role</link>
            <guid>https://www.pilot-period.org/skills_before_role</guid>
            <pubDate>Sun, 21 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Are cross-functional teams missing out on excellence by expecting everyone to be a master of everything? Challenge the misconception, embrace testers' specialized skills, and discover how prioritizing individual strengths over rigid roles sparks innovation in software development.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><em><strong>Are cross-functional teams missing out on excellence by expecting everyone to be a master of everything? Challenge the misconception, embrace testers' specialized skills, and discover how prioritizing individual strengths over rigid roles sparks innovation in software development.</strong></em></p>
</blockquote>
<p><strong>Embracing Diversity in Skillsets: The Role of Testers in Cross-Functional Teams</strong></p>
<p>In the evolving landscape of software development, the discourse often revolves around the structure of teams and the significance of individual roles. However, it's crucial to move beyond fixed roles and recognize the diverse skills and abilities each team member brings to the table. One area that deserves attention in this discussion is the role of testers within cross-functional teams.</p>
<p><img loading="lazy" alt="business man holding mask" src="https://www.pilot-period.org/assets/images/mask-3829017_1280-50bd2c274b6e3bf81a41072ee1bdc01c.jpg" width="1280" height="853" class="img_ev3q">
<em>Image by <a href="https://pixabay.com/users/geralt-9301/" target="_blank" rel="noopener noreferrer">geralt</a></em></p>
<p><strong>Breaking the Mold: Testers in Cross-Functional Teams</strong></p>
<p>Traditionally, there has been a debate about whether dedicated testers are necessary in agile and cross-functional teams. Some argue that every team member should be adept at testing, blurring the lines between roles. However, a more nuanced perspective acknowledges the unique expertise that testers bring to the development process.</p>
<p><strong>Complementary Strengths: The Tester's Contribution</strong></p>
<p>In a comprehensive approach to team dynamics, the focus is on building teams with a mix of skills tailored to specific goals. Testers, with their specialized knowledge in quality assurance and testing methodologies, play a crucial role in ensuring the robustness of the software. Their ability to identify and address potential issues adds a layer of quality that may be challenging for a non-specialist to replicate.</p>
<p><strong>Dispelling Misunderstandings: Testing as a Specialized Skill</strong></p>
<p>One common misunderstanding within discussions about cross-functional teams is the belief that every team member needs to be equally skilled in every aspect of software development. This misconception can lead to inflexible views on how teams work and hinder their potential. Acknowledging testing as a specialized skill dispels the notion that all team members need to be testing experts. Instead, it emphasizes the importance of collaboration, where testers and developers work together to achieve a balance between speed and quality.</p>
<p><strong>People-Centric Collaboration: Recognizing Individual Competencies</strong></p>
<p>Shifting the conversation from rigid roles to celebrating individuals and their capabilities is particularly relevant when discussing testers. By recognizing the unique skills that testers bring, teams can foster a collaborative culture where the focus is on complementing strengths rather than conforming to a one-size-fits-all approach.</p>
<p><strong>Fostering Innovation: The Tester's Role in Building Quality Software</strong></p>
<p>In the pursuit of innovation, having a dedicated focus on quality is paramount. Testers contribute to this by conducting thorough testing, identifying potential risks, and ensuring that the software meets the highest standards. Embracing a mix of skills, including the specialized expertise of testers, allows teams to create innovative solutions without compromising on quality.</p>
<p><strong>Conclusion: Celebrating Diversity for Collaborative Success</strong></p>
<p>In the ever-changing landscape of software development, the emphasis should be on recognizing and celebrating the diverse skills within cross-functional teams. Testers, with their unique expertise, play a vital role in enhancing the overall quality of the software. By dispelling the misunderstanding that cross-functional teams must have equal expertise in every area, teams can foster a culture that values individual competencies, truly embracing the richness that a diverse mix of skills brings to collaborative efforts. It's time to appreciate the integral role of testers and move towards a more inclusive and effective approach to cross-functional team dynamics.</p>]]></content:encoded>
            <category>agile</category>
            <category>team</category>
            <category>cross-functional</category>
            <category>tesing</category>
        </item>
        <item>
            <title><![CDATA[Does Customer Knows Best?]]></title>
            <link>https://www.pilot-period.org/customer-know-best</link>
            <guid>https://www.pilot-period.org/customer-know-best</guid>
            <pubDate>Sun, 14 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Unlock the true potential of your ongoing software projects by embracing the richness of customer diversity. Discover how acknowledging varied goals and distinguishing between aspirations and requirements can reshape your development journey. It's time to move beyond the one-size-fits-all approach and foster a collaborative environment that transforms customer input into a tailored roadmap for success.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><em><strong>Unlock the true potential of your ongoing software projects by embracing the richness of customer diversity. Discover how acknowledging varied goals and distinguishing between aspirations and requirements can reshape your development journey. It's time to move beyond the one-size-fits-all approach and foster a collaborative environment that transforms customer input into a tailored roadmap for success.</strong></em></p>
</blockquote>
<p>In the dynamic realm of software development, the maxim "customer knows best" has long been a guiding principle in requirements engineering.
However, as we navigate ongoing projects with a sense that they could benefit from a reevaluation, it becomes evident that assuming a singular,
all-knowing customer is a myth that can complicate rather than facilitate effective software development.</p>
<p>This article seeks to delve into the challenges arising from the assumption of homogeneous customer knowledge and proposes actionable strategies to address these complexities within the context of projects that may require a recalibration.</p>
<p><img loading="lazy" alt="a burning dart" src="https://www.pilot-period.org/assets/images/dart-1943313_1280-9bac5c1cc9c41aac89880aa9e691fa92.jpg" width="1280" height="720" class="img_ev3q">
<em>Image by <a href="https://pixabay.com/de/users/mastertux-470906/" target="_blank" rel="noopener noreferrer">MasterTux</a></em></p>
<p><strong>The Myth of Homogeneous Customer Knowledge</strong></p>
<p>The potential pitfall of adhering too strictly to the "customer knows best" mantra lies in the assumption of a uniform customer knowledge base. In reality, customers often constitute a diverse group with varying goals, perspectives, and priorities. This diversity poses a significant challenge in transforming their input into concrete requirements.</p>
<p><em>Action Point 1: Acknowledging Diversity</em></p>
<ul>
<li>Recognize and appreciate the diversity within the customer group.</li>
<li>Understand that each stakeholder brings a unique set of goals, expectations, and constraints to the table.</li>
</ul>
<p><em>Action Point 2: Stakeholder Mapping</em></p>
<ul>
<li>Develop a comprehensive stakeholder map, identifying different departments, roles, and levels within the organization.</li>
<li>Use this map to visualize and understand the diverse perspectives that need to be reconciled during the requirements engineering process.</li>
</ul>
<p><strong>Goals vs. Requirements</strong></p>
<p>While the adage "customer knows best" emphasizes the importance of customer input in requirements engineering, it's crucial to discern between high-level goals and concrete requirements. Customers often express overarching aspirations like "increase efficiency" or "improve user satisfaction." However, these aspirations lack the specificity required for effective software development.</p>
<p>A common challenge arises when customers, in an attempt to articulate their goals, inadvertently propose requirements that may not effectively fulfill those aspirations. This gap underscores the need for guidance in translating broad goals into tangible, actionable requirements.</p>
<p><em>Action Point 3: Goal-to-Requirement Translation</em></p>
<ul>
<li>Establish a structured process for translating overarching goals into specific and measurable requirements.</li>
<li>Engage in collaborative workshops with stakeholders to distill broad goals into requirements that directly contribute to achieving those goals.</li>
</ul>
<p><em>Action Point 4: Customer Guidance on Requirement Formulation</em></p>
<ul>
<li>Facilitate open communication with customers to ensure a clear understanding of their goals and expectations.</li>
<li>Provide guidance to customers in formulating requirements that align with and effectively contribute to achieving their stated goals.</li>
</ul>
<p>By differentiating between goals and requirements and offering guidance in the translation process, the development team can ensure that the final set of requirements not only captures customer aspirations accurately but also lays the groundwork for a successful and goal-oriented software development process.</p>
<p><strong>Conflicting Goals and Priorities</strong></p>
<p>The existence of conflicting goals and priorities within the customer group further complicates the process. Different departments may have divergent objectives, and individual stakeholders may prioritize features differently based on their roles and responsibilities.</p>
<p><em>Action Point 5: Open Communication and Negotiation</em></p>
<ul>
<li>Foster an environment of open communication between development teams and customers.</li>
<li>Initiate regular check-ins and feedback sessions to identify and address conflicting goals and priorities.</li>
<li>Establish a framework for negotiation and compromise that aligns with the overarching project objectives.</li>
</ul>
<p><strong>The Importance of Collaboration</strong></p>
<p>To overcome the challenges posed by the diversity of customer perspectives, effective collaboration between development teams and customers is paramount.</p>
<p><em>Action Point 6: Collaborative Techniques</em></p>
<ul>
<li>Utilize collaborative techniques such as workshops, interviews, and prototyping to facilitate a shared understanding of requirements.</li>
<li>Ensure that all stakeholders have a platform to voice their concerns and actively participate in the requirements engineering process.</li>
</ul>
<p>In conclusion, while the customer's input remains invaluable in the requirements engineering process, it is crucial to move beyond the simplistic notion that "customer knows best." By acknowledging diversity, translating goals into requirements, addressing conflicting priorities, and fostering collaboration, development teams can navigate the complexities inherent in customer knowledge within the ongoing context of their projects.</p>
<p><strong>Reading Recommendation</strong></p>
<ul>
<li>"Discovering Requirements: How to Specify Products and Services", book by Ian F. Alexander (2009)</li>
</ul>
<blockquote>
<p>Do you need to know how to create good requirements?
Discovering Requirements offers a set of simple, robust, and effective cognitive tools for building requirements. Using worked examples throughout the text, it shows you how to develop an understanding of any problem, leading to [the right] questions."</p>
</blockquote>]]></content:encoded>
            <category>requierements</category>
            <category>goals</category>
            <category>customer</category>
        </item>
        <item>
            <title><![CDATA[Testing Challenges in Complex Setup]]></title>
            <link>https://www.pilot-period.org/excel-in-complex-setups</link>
            <guid>https://www.pilot-period.org/excel-in-complex-setups</guid>
            <pubDate>Sun, 07 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Are your testing strategies stuck in the complexity maze? Discover how to break free, navigate challenges, and build a robust testing framework that stands the test of time. Uncover the secrets to unified testing success – because in the world of software, mediocrity is the real bug.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><em><strong>Are your testing strategies stuck in the complexity maze? Discover how to break free, navigate challenges, and build a robust testing framework that stands the test of time. Uncover the secrets to unified testing success – because in the world of software, mediocrity is the real bug.</strong></em></p>
</blockquote>
<p>In the relentless pursuit of project deadlines, the consequences of compromising on testing often come to light post-implementation. The inevitable dawn of quality issues prompts a concerted effort to address testing challenges in a complex setup. However, in the urgency to salvage the project, the critical aspect of thorough and qualitative planning, with the objective of "building quality in," often takes a back seat.</p>
<p>When faced with unexpected quality issues in a complex setup involving</p>
<ul>
<li>multiple development teams,</li>
<li>customizers, and</li>
<li>a diverse customer base,</li>
</ul>
<p>organizations are compelled to navigate through coordinated testing challenges.</p>
<p><img loading="lazy" alt="a team solving a puzzle" src="https://www.pilot-period.org/assets/images/integration-1777536_1280-5d839976fef74b21f7429a978f4f1cc1.jpg" width="1280" height="570" class="img_ev3q">
<em>Image by <a href="https://pixabay.com/users/geralt-9301/" target="_blank" rel="noopener noreferrer">geralt</a></em></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-pitfalls-of-testing-dynamics">The Pitfalls of Testing Dynamics<a href="https://www.pilot-period.org/excel-in-complex-setups#the-pitfalls-of-testing-dynamics" class="hash-link" aria-label="Direct link to The Pitfalls of Testing Dynamics" title="Direct link to The Pitfalls of Testing Dynamics">​</a></h2>
<p><strong>Lack of Unified Test Concept</strong></p>
<p>In complex setups, there is often an overarching sense of "quality," but primarily from a strategic perspective. The challenge arises from a lack of a unified test concept, as each team operates with its own testers under the charge of team leads, without a detailed test strategy covering the entirety of the software.</p>
<p><strong>Missing "One Team" Sense in Testing</strong></p>
<p>The decentralized nature of testing across various teams and customizers contributes to a challenge in fostering a "one team" sense in testing. Each team may have its own quality assurance focus, leading to potential blind spots and overlooking critical interactions between components.</p>
<p><strong>Coordinating Test Efforts</strong></p>
<p>The coordination of testing efforts becomes a challenge when decentralized teams operate with varied testing approaches. This dynamic makes it more difficult to ensure a comprehensive and cohesive testing strategy that spans the entire software architecture.</p>
<p><strong>Insufficient Cross-Team Communication</strong></p>
<p>The absence of a unified test concept often translates into challenges related to cross-team communication. This siloed approach hampers the identification and resolution of cross-functional issues that can significantly impact the end-user experience.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-testers-voice-fostering-consolidated-testing-insights">The Tester's Voice: Fostering Consolidated Testing Insights<a href="https://www.pilot-period.org/excel-in-complex-setups#the-testers-voice-fostering-consolidated-testing-insights" class="hash-link" aria-label="Direct link to The Tester's Voice: Fostering Consolidated Testing Insights" title="Direct link to The Tester's Voice: Fostering Consolidated Testing Insights">​</a></h2>
<p>To address the challenges of coordinated testing in complex setups, it is crucial to elevate the voice of testers from all teams. Their insights and perspectives should be not only valued but celebrated, as they contribute to the creation of a powerful and consolidated image of the software's testing needs.</p>
<p><strong>A Collaborative Approach</strong></p>
<p>Rather than relying on top-down decisions, embrace a collaborative approach where the voices of individual testers are heard, fostering a stronger sense of identification with the testing process. This not only enhances the quality of testing strategies but also empowers teams to take charge of their testing journey.</p>
<p><strong>The Importance of Listening</strong></p>
<p>Listening to testers from diverse teams is not just about hearing their opinions; it's about acknowledging their unique insights and experiences. This approach empowers testers to shape the testing process, enriching it by uncovering potential blind spots and ensuring that the entire software architecture is thoroughly examined.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="empowering-teams">Empowering Teams<a href="https://www.pilot-period.org/excel-in-complex-setups#empowering-teams" class="hash-link" aria-label="Direct link to Empowering Teams" title="Direct link to Empowering Teams">​</a></h2>
<p>Empower teams with the autonomy to <em>shape</em> their testing strategies. This not only builds a more resilient and effective testing framework but also instills a sense of ownership. When team members actively contribute to the planning and execution of testing efforts, their identification with the process becomes a powerful force.</p>
<p><strong>A Holistic Approach Across Complex Setups</strong></p>
<p>In complex setups involving multiple development teams, customizers, and a diverse customer base, the "build quality in" approach should transcend individual responsibilities. Quality assurance should not be the sole responsibility of specific teams; instead, it should be an overarching principle embraced by every stakeholder in the process.</p>
<p><strong>Building Quality In: A Collective Empowerment</strong></p>
<p>Recognizing that quality cannot be tested into a product only after development but must be an intrinsic part of the entire chain is pivotal. Each development team, customizer, and customer plays a crucial role in this collective empowerment to build quality into the software from the ground up.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-quality-assurance-starts-with-unified-planning-and-empowerment">Conclusion: Quality Assurance Starts with Unified Planning and Empowerment<a href="https://www.pilot-period.org/excel-in-complex-setups#conclusion-quality-assurance-starts-with-unified-planning-and-empowerment" class="hash-link" aria-label="Direct link to Conclusion: Quality Assurance Starts with Unified Planning and Empowerment" title="Direct link to Conclusion: Quality Assurance Starts with Unified Planning and Empowerment">​</a></h2>
<p>While the challenges of coordinated testing in complex setups may be intricate, it is imperative to recognize that the aftermath of quality issues demands more than a rushed search for test resources. The true solution lies in fostering a culture of qualitative planning, a collective commitment to building quality in, and an empowering environment where every tester's voice is not only heard but celebrated. This proactive approach not only mitigates risks but also lays the foundation for delivering software that stands the test of time.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="concrete-steps-to-forge-unified-testing-success-in-complex-environments">Concrete Steps to Forge Unified Testing Success in Complex Environments<a href="https://www.pilot-period.org/excel-in-complex-setups#concrete-steps-to-forge-unified-testing-success-in-complex-environments" class="hash-link" aria-label="Direct link to Concrete Steps to Forge Unified Testing Success in Complex Environments" title="Direct link to Concrete Steps to Forge Unified Testing Success in Complex Environments">​</a></h2>
<p>Here's a short action list on how to overcome the challenges of coordinated testing in complex setups and empower testing excellence:</p>
<p><strong>1. Establish a Unified Test Concept</strong></p>
<p>Develop a comprehensive test concept that spans the entire software architecture. Ensure that every team, including customizers and stakeholders, contributes to and aligns with this unified vision for testing.</p>
<p><strong>2. Foster a Collaborative Testing Culture</strong></p>
<p>Promote a culture of collaboration where testers from diverse teams actively engage with each other. Encourage open communication channels, knowledge sharing sessions, and cross-team workshops to foster a sense of unity in testing.</p>
<p><strong>3. Implement Cross-Functional Testing Teams</strong></p>
<p>Consider forming cross-functional testing teams that include members from different departments and teams. This approach helps break down silos and encourages a shared responsibility for testing excellence.</p>
<p><strong>4. Emphasize Agile and Iterative Testing</strong></p>
<p>Implement agile and iterative testing methodologies that allow for continuous feedback and adjustments. This approach accommodates changes, encourages flexibility, and ensures that testing efforts evolve alongside the development process.</p>
<p><strong>5. Prioritize Test Automation</strong></p>
<p>Invest in test automation to streamline repetitive tasks and enhance testing efficiency. Automated testing can provide quick feedback, reduce manual errors, and allow testers to focus on more complex and critical aspects of the software.</p>
<p><strong>6. Conduct Regular Cross-Team Knowledge Sharing</strong></p>
<p>Organize regular knowledge-sharing sessions where testers from different teams present their findings, challenges, and best practices. This helps create a more informed testing community and enables cross-pollination of ideas.</p>
<p><strong>7. Empower Testers with Decision-Making Authority</strong></p>
<p>Empower individual testers by providing them with decision-making authority over their testing strategies. This autonomy fosters a sense of ownership and encourages testers to proactively contribute to the testing process.</p>
<p><strong>8. Implement Collaborative Testing Tools</strong></p>
<p>Utilize collaborative testing tools that facilitate communication and cooperation among testers from different teams. Shared platforms can enhance visibility into testing activities, making it easier to coordinate efforts and share insights.</p>
<p><strong>9. Encourage Continuous Learning</strong></p>
<p>Create an environment that values continuous learning and skill development for testers. Encourage participation in training programs, workshops, and industry events to stay updated on the latest testing practices and technologies.</p>
<p><strong>10. Celebrate Testing Achievements</strong></p>
<p>Recognize and celebrate testing achievements, whether big or small. Acknowledge the efforts of individual testers and teams to reinforce a positive and empowering testing culture.</p>
<p>Implementing these actions can help organizations overcome the challenges of coordinated testing in complex setups, fostering a culture of collaboration, empowerment, and continuous improvement in testing excellence.</p>]]></content:encoded>
            <category>testing</category>
            <category>one-team</category>
        </item>
        <item>
            <title><![CDATA[Feel the Heartbeat of Software Testing]]></title>
            <link>https://www.pilot-period.org/tester-vs-bot</link>
            <guid>https://www.pilot-period.org/tester-vs-bot</guid>
            <pubDate>Sun, 31 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[If your approach to software testing consists of merely navigating through predefined test cases with specified inputs and expected outcomes, and your only action is to tick checkboxes without engaging in thorough testing, then you are not functioning as a tester; rather, you are akin to a bot.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><em><strong>If your approach to software testing consists of merely navigating through predefined test cases with specified inputs and expected outcomes, and your only action is to tick checkboxes without engaging in thorough testing, then you are not functioning as a tester; rather, you are akin to a bot.</strong></em></p>
</blockquote>
<p>In the world of software testing, there's a big difference between doing the bare minimum and truly understanding what you're testing. Imagine this: instead of really digging into the software, a tester just goes through a set list of tests, checking boxes as they go. It might look like progress, but it's like scratching the surface without getting to the real stuff.</p>
<p><img loading="lazy" alt="human finger touches robot finger" src="https://www.pilot-period.org/assets/images/tester-vs-bot-a3173bbe3df321690089ed322964abbf.jpg" width="1280" height="853" class="img_ev3q">
<em>Image by <a href="https://pixabay.com/users/geralt-9301/" target="_blank" rel="noopener noreferrer">geralt</a></em></p>
<p><strong>The Ritual</strong></p>
<p>Picture this as a ritual: a tester follows a set path, just ticking off boxes with specific inputs and expected results. It's like a dance, but instead of exploring the software's ins and outs, it's more like going through the motions.</p>
<p><strong>The Misleading Idea</strong></p>
<p>Let's clear something up: just ticking boxes doesn't equal effective testing. It might seem like things are getting done, but it doesn't go deep enough to find the hidden problems in the code.</p>
<p><strong>Going Beyond</strong></p>
<p>Software testing is an art. It's not just about following a script; it's about actively thinking and engaging with the software. Real testers don't stick to the script – they go off the beaten path, checking every corner for potential issues.</p>
<p><strong>More Than Just Checking Boxes</strong></p>
<p>Good testers don't rely only on checkboxes in a test execution plan. They bring in critical thinking, creativity, and a deep understanding of how the software works. Thorough testing means crafting tests that go beyond the obvious, thinking ahead, and making sure every part of the software gets a good look.</p>
<p><strong>The Danger of Robotic Testing</strong></p>
<p>When testing becomes mindless checkbox ticking, it's like being stuck in robot mode. The line between a real tester and an automated bot starts to blur. The human touch – the ability to adapt, think creatively, and find tricky issues – disappears.</p>
<p><strong>Conclusion: Embracing  The Quality Journey</strong></p>
<p>In software testing, it's not just about getting through a checklist. It's a journey, a quest to really understand what makes the software tick. Let's move past the routine and embrace the heart of testing – an ever-evolving process that separates the real testers from the software bots.</p>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>The Role of Regression Tests</div><div class="admonitionContent_BuS1"><p>While advocating for a holistic approach and  the importance of moving beyond checkbox testing to truly understand and engage with software, it is crucial to acknowledge the value of reliable regression tests.</p><p><strong>It is the combination of thoughtful, exploratory testing and robust regression testing that forms the backbone of a comprehensive quality assurance strategy.</strong></p><p>Striking this balance ensures not only the uncovering of new issues but also the preservation of the stability and reliability of the software over time.</p><p>Be aware to recognize the moment to introduce automation into your testing strategy as a key consideration for maintaining an effective and efficient software testing process.</p></div></div>]]></content:encoded>
            <category>testing</category>
            <category>automation</category>
        </item>
        <item>
            <title><![CDATA[How to become a software tester]]></title>
            <link>https://www.pilot-period.org/how</link>
            <guid>https://www.pilot-period.org/how</guid>
            <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[About how to become a software tester]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="about-how-to-become-a-software-tester">About how to become a software tester<a href="https://www.pilot-period.org/how#about-how-to-become-a-software-tester" class="hash-link" aria-label="Direct link to About how to become a software tester" title="Direct link to About how to become a software tester">​</a></h2>
<p>Well, you can google this and get a lot of valid answers.</p>
<p>So, this is the story, about <strong>I</strong> became a software tester.</p>
<p>After successfully graduating from technical college about 15+ years ago, I was hired by a small software development company. It was specialized in software for a small market in the broadcasting sector. The software was very modular, highly configurable and rich in interfaces - either to our own modules or to third party vendors.</p>
<p>My job was to install, configure and take the software into production at the customer's site (within the scope of implementation projects). Furthermore, I provided remote support from the office. If errors occurred during operation, I was the first point of contact for the customer.</p>
<p>At this time there was no tester or test process in my team. Nor was there a clearly defined release process. The developers tested themselves, sent debug versions (all in one *.exe files) via email to the customer. The customer then tried it out and put the version into operation.</p>
<p>This was my first contact with a mantra, which is still with me today:</p>
<blockquote>
<p><strong>"The customer tests himself. He knows best. He knows how it should work".</strong></p>
</blockquote>
<p>When I sat back in the support office in front of our web portal, I somehow got a different impression. If the customer knew how it had to work, why would he put a version into operation that caused errors after a more or even less long period being in production?</p>
<p>And why were the customers so angry,  complaining about bad quality? After all, they had tested it themselves. With their own business processes. And found it to be suitable? Otherwise they wouldn't have put the version into production, right?</p>
<p>I agree, the difference between "testing" and "trying something out" needs a separate post...</p>
<p>In any case, I was tired of constantly vowing better quality next time to customers. I'm sure our customers were also tired of believing me.</p>
<p>So, this small software development team had also heard something about the concept of having independent software testing. Having tests done by a second instance (besides the developer himself) before release the software to the customer.</p>
<p>I found the topic exciting. After all, it would enable me to gain even more better knowledge how the software works. I would also be more competent in answering questions when supporting. We would find errors earlier. We would better understand the customer's business processes. All in all, deliver better quality.</p>
<p>So that's how my career as a software tester started. An exciting job with a lot of build-up work and a steep learning curve.</p>
<p>PS:</p>
<p>Testing in a team with 5 - 6 developers is not a part-time job. And I still had the other tasks, that time. When customer start to order more projects again, I realized that the focus would be shifted.  I would have even less time for what had become the job I wanted to do in future. So I decided to say goodbye and work as a software tester from now on.</p>]]></content:encoded>
            <category>SoftwareTesting</category>
            <category>QualityAssurance</category>
        </item>
    </channel>
</rss>