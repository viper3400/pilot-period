"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[521],{8466:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"automation-vs-test-tool","metadata":{"permalink":"/pilot-period/de/automation-vs-test-tool","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-11-12-automation-vs-test-tool.mdx","title":"Automation vs. Testframework","description":"Skill Level: Anf\xe4nger","date":"2022-11-12T00:00:00.000Z","formattedDate":"12. November 2022","tags":[{"label":"software-testing","permalink":"/pilot-period/de/tags/software-testing"},{"label":"automation","permalink":"/pilot-period/de/tags/automation"},{"label":"serenity-js","permalink":"/pilot-period/de/tags/serenity-js"}],"readingTime":2.255,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"https://static.vecteezy.com/system/resources/thumbnails/006/487/917/small_2x/man-avatar-icon-free-vector.jpg","key":"jang"}],"frontMatter":{"slug":"automation-vs-test-tool","title":"Automation vs. Testframework","authors":["jang"],"tags":["software-testing","automation","serenity-js"]}},"content":"_Skill Level: Anf\xe4nger_\\n\\n# Der Unterschied zwischen Automation, Browserautomation und Testframework\\n\\nIn der Diskussion \xfcber das richtige Framework oder Tool f\xfcr die automatische Durchf\xfchrung von\\nTests f\xfcr Webapplikationen kommt es in Diskussionen oft zu einem hitzigen\\nSchlagabtausch. Bezeichnend daf\xfcr ist, dass es dann h\xe4ufig um die technischen\\nAspekte eines Framework oder Tools geht. \\n\\nWir velieren dabei einen einfachen Sachverhalt aus den Augen\\nund nicht selten wird dann aneinander vorbei geredet. Je aufgehitzer die Diskussion, desto\\nmehr rutscht der eigentliche Aspekt des Testens in den Hintergrund.\\n\\n\\nNehmen wir uns ein Schlagwort und nehmen wir es auseinander: **Testautomation**. Diese Wort besteht aus den\\nTeilen **Test** und **Automation**.\\n\\n### Beispiel A - Automation\\nSchauen wir und dazu ein Beispiel an:\\n- Wir haben eine Anzahl\\nVerzeichnisse\\n- In diesen Verzeichnissen suchen wir nach Dateien.\\n- Ist eine Datei\\n\xe4lter als 60 Tage, l\xf6schen wir diese.\\n\\nEin Automationsskript k\xf6nnte so aussehen:\\n\\n```ts\\nvar folders = [ \'pictures\', \'documents\', \'desktop\' ];\\n\\nforeach(folder in folders) {\\n    var files = folder.getFiles();\\n    foreach (file in files) {\\n        var fileAge = file.getAge();\\n        if (fileAge > Days(60))\\n          delete(file)\\n    }\\n}\\n```\\n\\nWir haben also das L\xf6schen von alten Dateien **automatisiert**. \\nAber haben wir **getestet**, das die Dateien gel\xf6scht worden sind?\\n\\nGehen wir \xfcber zum n\xe4chsten Schalgwort, der **Browserautomation**. \\nWir **automatisieren** den **Browser**.\\n\\n### Beispiel B - Browserautomation\\nAuch hier haben wir einen entsprechenden Auftrag:\\n- \xd6ffne eine Suchmaschiene\\n- Suche, wie man ein Ei kochen muss\\n\\nDas Skript im Tool zur Browserautomation unserer Wahl k\xf6nnte so aussehen:\\n\\n```ts\\nvar webpage = browser.getUrl(\'https://duckduckgo.com\');\\n\\nwebpage.enterSearchValue(\'how to boil an egg\');\\nwebpage.click(searchButton);\\n\\n```\\n\\nAuch hier: Wir haben die Suche bzw. die Seite im Browser **automatisiert**, **nicht** aber das Suchergebnis **\xfcberpr\xfcft**.\\nWir wissen also nicht, ob unsere Suche tats\xe4chlich funktioniert hat.\\n\\nAutomation heisst also zun\xe4chst ersteinmal nur einen Ablauf, den ich \\nnormalerweise manuell durchf\xfchren w\xfcrde, durch einen Automaten \\ndurchf\xfchren zu lassen.\\n\\n\\n\\n### Testautomation\\n\\nIn beiden F\xe4llen haben wir Abl\xe4ufe **automatisiert**,\\njedoch noch nicht wirklicht **getestet**.\\n\\n- Ein Ablauf ist **ergebnisunabh\xe4ngig**\\n- Ein Test zwingend abh\xe4ngig von einem **erwarteten Ergebnis**\\n\\nIch kann das erwartete Ergebnis nat\xfcrlich manuell \xfcberpr\xfcfen, bzw.\\ntesten. Um auch den Test zu automatisieren, wird ein Testframework\\nben\xf6tigt. \\n\\nMit diesem Framework kann ich pr\xfcfen, ob das **Ergebnis** einer vorgelagerten\\n**Automation** meinen **Erwartungen** entspricht.\\n\\n\\nUnsere beiden Beispiele A und B mit einem Testframework erweitert,\\nk\xf6nnten nun wie folgt aussehen.\\n\\nF\xfcr Beispiel A:\\n\\n```ts\\nvar expectedDeletedFile = \'Image61DaysOld.png\';\\nvar expectedNotDeletedFile = \'Image60DaysOld.png\';\\n\\nvar folders = [ \'pictures\', \'documents\', \'desktop\' ];\\n\\nforeach(folder in folders) {\\n    var files = folder.getFiles();\\n    foreach (file in files) {\\n        var fileAge = file.getAge();\\n        if (fileAge > Days(60))\\n          delete(file)\\n    }\\n}\\n\\ntest(FileNotExists(expectedDeletedFile));\\ntest(FileExists(expectedNotDeletedFile));\\n```\\n\\nF\xfcr Beispiel B:\\n\\n```ts\\nvar expectedLink = \'https://ilovecooking/boil_an_egg.html\':\\n\\nvar webpage = browser.getUrl(\'https://duckduckgo.com\');\\n\\nwebpage.enterSearchValue(\'how to boil an egg\');\\nwebpage.click(searchButton);\\n\\ntest(LinkExistsOnPage(expectedLink)):\\n\\n```"}]}')}}]);