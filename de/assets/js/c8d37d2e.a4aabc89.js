"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6787],{9588:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"sjs-playwright-ct","metadata":{"permalink":"/de/sjs-playwright-ct","source":"@site/blog/2024-02-25-sjs-playwright-ct.mdx","title":"Component Testing with React/Next.js, Playwright, and Serenity/JS","description":"*Continuing my series about Serenity/JS:","date":"2024-02-25T00:00:00.000Z","formattedDate":"25. Februar 2024","tags":[{"label":"testing","permalink":"/de/tags/testing"},{"label":"automation","permalink":"/de/tags/automation"},{"label":"serenity-js","permalink":"/de/tags/serenity-js"},{"label":"hands-on","permalink":"/de/tags/hands-on"},{"label":"BDD","permalink":"/de/tags/bdd"}],"readingTime":7.72,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"sjs-playwright-ct","title":"Component Testing with React/Next.js, Playwright, and Serenity/JS","authors":["jang"],"tags":["testing","automation","serenity-js","hands-on","BDD"]},"unlisted":false,"nextItem":{"title":"Concrete Examples - Key to Software Collaboration","permalink":"/de/concrete-examples"}},"content":">***Continuing my series about Serenity/JS:\\nDive into the potent pairing of Serenity/JS and Playwright.\\nWitness how this winning combination revolutionizes component testing.\\nReady to elevate your testing game?***\\n\\nPlaywright introduces an \\n[experimental component testing approach](https://playwright.dev/docs/test-components).\\nIn this tutorial, we\'ll explore how to seamlessly integrate component testing into a \\nReact/Next.js application using Playwright in conjunction with \\n[Serenity/JS](https://serenity-js.org/), a powerful testing framework.\\n\\n![Serenity/JS](/img/serenity-js-social-card.jpg)\\n\\n:::tip\\nThis tutorial provides a step-by-step guide to set up and execute tests from scratch.\\nHowever, if you prefer to skip these steps, you can access the complete example code in\\n[this GitHub repository](https://github.com/viper3400/next-sjs-ct-tutorial).\\n:::\\n\\n## Setting Up an Example Application\\n\\nBefore diving into testing, let\'s establish a baseline React application.\\nFollowing the [recommended guidelines](https://react.dev/learn/start-a-new-react-project),\\nwe\'ll leverage [Next.js](https://nextjs.org/) as our framework of choice.\\n\\nWe\'ll initialize a Next.js application in\\n[non-interactive mode](https://nextjs.org/docs/pages/api-reference/create-next-app#non-interactive),\\nincorporating TypeScript and Tailwind CSS.\\n\\n```sh\\nnpx create-next-app@latest next-sjs-ct-tutorial --ts --tailwind --eslint --app --src-dir --import-alias \\"@/*\\"\\ncd next-sjs-ct-tutorial\\nnpm run dev[def]\\n```\\n\\nOnce completed, your newly created Next.js application will be\\naccessible at http://localhost:3000/.\\n\\n:::info[Mind the Node.js version]\\nEnsure that you\'ve installed at least Node.js version 18.17.0 for Next.js,\\nthe minimum required version by the time of writing.\\nYou can manage Node.js versions using tools like [Volta](https://volta.sh/).\\nFor example, pinning the Node.js version to the latest available, currently 20.11.1,\\ncan be achieved with:\\n\\n```sh\\nvolta pin node@latest\\ngit add .\\ngit commit -m \\"Pinned Node.js version using Volta\\"\\n```\\n:::\\n\\nNow, let\'s enhance our basic page by creating a small application with the following\\nuser story:\\n\\n:::note[User Story]\\nAs a user, I want to interact with a counter component that displays a count value and allows me to increase or decrease it within a specified range.\\nThe component should feature two buttons: \\"Increase\\" and \\"Decrease.\\"\\n\\nWhen I click the \\"Increase\\" button, the displayed count value should increment, providing immediate visual feedback. Conversely, clicking the \\"Decrease\\" button should decrement the count value. However, these actions should be constrained within a defined range, preventing the count from exceeding a maximum of 10 and a minimum value of 0.\\n\\nTo ensure intuitive interaction, the buttons should visually indicate when they are disabled, preventing further increment or decrement operations beyond the defined range. This clear visual feedback helps me understand the available actions at a glance, enhancing my overall user experience with the counter component.\\n:::\\n\\nCreate a `./src/components/Counter.tsx` file within your project to implement this \\nfunctionality.\\n\\n```tsx title=\\"./src/component/Counter.tsx\\"\\n\'use client\'\\n\\nimport { useState } from \\"react\\"\\n\\nexport const Counter = () => {\\n    // Define state variables for count and minimum/maximum values\\n    const [count, setCount] = useState(0)\\n    const minCount = 0\\n    const maxCount = 10\\n    \\n    // Function to handle click on the \\"Increase\\" button\\n    function onIncreaseButtonClick(): void {\\n        // Check if count is less than maximum allowed count\\n        if (count < maxCount) {\\n            // Increment count by 1\\n            setCount(count + 1)\\n        }\\n    }\\n\\n    // Function to handle click on the \\"Decrease\\" button\\n    function onDecreaseButtonClick(): void {\\n        // Check if count is greater than minimum allowed count\\n        if (count > minCount) {\\n            // Decrement count by 1\\n            setCount(count - 1)\\n        }\\n    }\\n\\n    // Define button styles for normal, hover, and disabled states\\n    const buttonStyle = \\"bg-blue-500 text-white font-bold py-2 px-4 rounded\\"\\n    const hoverStyle = \\"hover:bg-blue-700\\"\\n    const disabledButtonStyle = \\"bg-gray-400 cursor-not-allowed\\"\\n\\n    return (\\n        <>\\n          {/* Display the current count */}\\n          <div className=\\"flex space-x-2\\">\\n            <div>Count:</div>\\n            <div\\n                data-testid=\\"count\\">\\n                {count}\\n            </div>\\n          </div>\\n          {/* Render buttons for incrementing and decrementing the count */}\\n          <div className=\\"flex space-x-4\\">\\n            {/* Increase button */}\\n            <button \\n                className={`${buttonStyle} ${count >= maxCount ? disabledButtonStyle : hoverStyle}`}\\n                onClick={onIncreaseButtonClick}\\n                disabled={count === maxCount}\\n                data-testid=\\"button-increase\\">\\n                Increase\\n            </button>\\n            {/* Decrease button */}\\n            <button \\n                className={`${buttonStyle} ${count === minCount ? disabledButtonStyle : hoverStyle}`}\\n                onClick={onDecreaseButtonClick}\\n                disabled={count === minCount }\\n                data-testid=\\"button-decrease\\">\\n                Decrease\\n            </button>\\n           </div>\\n        </>\\n    )\\n}\\n```\\n\\nUpdate `./src/app/page.tsx` to include the Counter component on the main page:\\n\\n```tsx title=\\"./src/app/page.tsx\\"\\nimport { Counter } from \\"@/components/Counter\\";\\n\\nexport default function Home() {\\n  return (\\n    <main className=\\"flex min-h-screen flex-col items-center p-24 space-y-4\\">\\n      <Counter />\\n    </main>\\n  );\\n}\\n```\\n\\nWith these changes, you can now utilize the increase/decrease counter\\nfunctionality on your Next.js page.\\n\\n```sh\\ngit add .\\ngit commit -m \\"Implemented Counter\\"\\n```\\n\\n## Integrating Playwright and Serenity/JS\\n\\nNow, let\'s integrate the necessary dependencies for testing, \\nincluding Playwright and Serenity/JS, along with associated packages \\nfor assertions and reporting.\\n\\n```sh\\nnpm install --save-dev \\\\\\n  @serenity-js/assertions \\\\\\n  @serenity-js/console-reporter \\\\\\n  @serenity-js/core \\\\\\n  @serenity-js/playwright \\\\\\n  @serenity-js/playwright-test \\\\\\n  @serenity-js/serenity-bdd \\\\\\n  @serenity-js/web \\\\\\n  @playwright/experimental-ct-react \\\\ \\n  rimraf \\\\\\n  npm-failsafe\\n```\\n\\nUpdate the `package.json` file with scripts for cleaning, executing tests,\\nand generating reports using Serenity/JS.\\n\\n```json title=\\"./package.json\\"\\n[...]\\n\\n\\"scripts\\": { \\n\\n    [...]\\n\\n    \\"clean\\": \\"rimraf dist target\\",\\n    \\"serenity-bdd:update\\": \\"serenity-bdd update\\",\\n    \\"test:ct\\": \\"failsafe clean serenity-bdd:update test:execute test:report\\",\\n    \\"test:execute\\": \\"playwright test -c playwright-ct.config.ts\\",\\n    \\"test:report\\": \\"serenity-bdd run --features ./src/components\\"\\n}\\n\\n[\\n\\n...]\\n```\\n\\nDefine the Playwright configuration file `playwright-ct.config.ts`, which includes\\nsettings for test directories, reporters, browser configurations, and other options\\nfor running the tests.\\n\\n```ts title=\\"./playwright-ct.config.ts\\"\\nimport { defineConfig, devices } from \'@playwright/experimental-ct-react\'\\nimport { SerenityOptions } from \'@serenity-js/playwright-test\'\\n\\n/**\\n * See https://playwright.dev/docs/test-configuration.\\n */\\nexport default defineConfig<SerenityOptions>({\\n  testDir: \'./src/components\',\\n  /* The base directory, relative to the config file, for snapshot files created with toMatchSnapshot and toHaveScreenshot. */\\n  snapshotDir: \'./__snapshots__\',\\n  /* Maximum time one test can run for. */\\n  timeout: 10 * 1000,\\n  /* Run tests in files in parallel */\\n  fullyParallel: true,\\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\\n  forbidOnly: !!process.env.CI,\\n  /* Retry on CI only */\\n  retries: process.env.CI ? 2 : 0,\\n  /* Opt out of parallel tests on CI. */\\n  workers: process.env.CI ? 1 : undefined,\\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\\n  reporter: [\\n    [ \'line\' ],\\n    [ \'html\', { open: \'never\' } ],\\n    [ \'@serenity-js/playwright-test\', {\\n      crew: [\\n        [ \'@serenity-js/serenity-bdd\', { specDirectory: \'./src/components\' } ],\\n        \'@serenity-js/console-reporter\',\\n        [ \'@serenity-js/core:ArtifactArchiver\', { outputDirectory: \'./target/site/serenity\' } ],\\n        // [ \'@serenity-js/core:StreamReporter\', { outputFile: \'./target/events.ndjson\' }]\\n      ],\\n    } ],\\n  ],\\n\\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\\n  use: {\\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\\n    trace: \'on-first-retry\',\\n\\n    /* Port to use for Playwright component endpoint. */\\n    ctPort: 3100,\\n\\n    /* Set headless: false to see the browser window */\\n    headless: true,\\n\\n    crew: [\\n      [ \'@serenity-js/web:Photographer\', {\\n        strategy: \'TakePhotosOfInteractions\'\\n      } ]\\n    ],\\n    defaultActorName: \'Tess\',\\n  },\\n\\n  /* Configure projects for major browsers */\\n  projects: [\\n    {\\n      name: \'chromium\',\\n      use: { ...devices[\'Desktop Chrome\'] },\\n    },\\n    {\\n      name: \'firefox\',\\n      use: { ...devices[\'Desktop Firefox\'] },\\n    },\\n    {\\n      name: \'webkit\',\\n      use: { ...devices[\'Desktop Safari\'] },\\n    },\\n  ],\\n})\\n```\\n\\nIn this code block, tasks and page elements for Serenity/JS\\nare defined to ensure the functionality of the counter component.\\nTasks include checking button states, verifying count values,\\nand other assertions related to the counter component.\\n\\n```ts title=\\"./src/components/CounterSerenitiy.ts\\"\\nimport { Ensure, contain, equals, not } from \\"@serenity-js/assertions\\";\\nimport { Task } from \\"@serenity-js/core\\";\\nimport { By, PageElement, isEnabled, Text, CssClasses } from \\"@serenity-js/web\\";\\n\\nexport class CounterSerenity {\\n    static CounterLabel = PageElement\\n        .located(By.css(\'[data-testid=\\"count\\"]\'))\\n        .describedAs(\'label that shows the current count\')\\n\\n    static IncreaseButton = PageElement\\n        .located(By.css(\'[data-testid=\\"button-increase\\"]\'))\\n        .describedAs(\'button to increase the count\')\\n\\n    static DecreaseButton = PageElement\\n        .located(By.css(\'[data-testid=\\"button-decrease\\"]\'))\\n        .describedAs(\'button to decrease the count\')\\n\\n    static EnsureIncreaseButtonIsEnabled = () =>\\n        Task.where(\'#actor ensures that increase button is enabled\',\\n            Ensure.that(\\n                CssClasses.of(this.IncreaseButton),\\n                not(contain(\'cursor-not-allowed\')))\\n        )\\n\\n    static EnsureIncreaseButtonIsNotEnabled = () =>\\n        Task.where(\'#actor ensures that increase button is not enabled\',\\n            Ensure.that(\\n                CssClasses.of(this.IncreaseButton),\\n                contain(\'cursor-not-allowed\'))\\n        )\\n\\n    static EnsureDecreaseButtonIsEnabled = () =>\\n        Task.where(\'#actor ensures that decrease button is enabled\',\\n            Ensure.that(\\n                CssClasses.of(this.DecreaseButton),\\n                not(contain(\'cursor-not-allowed\')))\\n        )\\n\\n    static EnsureDecreaseButtonIsNotEnabled = () =>\\n        Ensure.that(\\n            CssClasses.of(this.DecreaseButton),\\n            (contain(\'cursor-not-allowed\'))\\n        )\\n\\n    static EnsureCount = (count: string) =>\\n        Task.where(`#actor ensures count label displays a value of ${count}`,\\n            Ensure.that(Text.of(this.CounterLabel), equals(count)))\\n}\\n```\\n\\nThis section contains the test specifications for the Counter component using\\nPlaywright and Serenity/JS. Tests cover scenarios such as initial state verificatio\\n and interactions to reach upper count limits while ensuring button states and count\\n values are correctly maintained.\\n\\n```tsx title=\\"./src/components/Counter.spec.tsx\\"\\nimport { test as componentTest } from \'@playwright/experimental-ct-react\'\\nimport { useBase } from \'@serenity-js/playwright-test\'\\nimport { Click, PageElement } from \'@serenity-js/web\'\\nimport React from \'react\'\\nimport { Counter } from \'./Counter\'\\nimport { CounterSerenity } from \'./CounterSerenity\'\\nimport { Duration, Wait } from \'@serenity-js/core\'\\n\\n\\n// eslint-disable-next-line react-hooks/rules-of-hooks\\nconst { it, describe } = useBase(componentTest)\\n\\ndescribe(\'Counter\', () => {\\n\\n    it(\'ensures initial state\', async ({ mount, actor }) => {\\n\\n        const x = PageElement.from(await mount(\\n            <Counter />\\n        )).describedAs(\'counter component\')\\n\\n        await actor.attemptsTo(\\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\\n            CounterSerenity.EnsureDecreaseButtonIsNotEnabled(),\\n            CounterSerenity.EnsureCount(\'0\')\\n        )\\n    })\\n\\n    it(\'ensures state after click to upper limit\', async ({ mount, actor }) => {\\n\\n        const x = PageElement.from(await mount(\\n            <Counter />\\n        )).describedAs(\'counter component\')\\n\\n        await actor.attemptsTo(\\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\\n            CounterSerenity.EnsureDecreaseButtonIsNotEnabled(),\\n            CounterSerenity.EnsureCount(\'0\'),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\\n            CounterSerenity.EnsureDecreaseButtonIsEnabled(),\\n            CounterSerenity.EnsureCount(\'1\'),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\\n            CounterSerenity.EnsureDecreaseButtonIsEnabled(),\\n            CounterSerenity.EnsureCount(\'6\'),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            Click.on(CounterSerenity.IncreaseButton),\\n            CounterSerenity.EnsureCount(\'10\'),\\n            CounterSerenity.EnsureIncreaseButtonIsNotEnabled(),\\n            CounterSerenity.EnsureDecreaseButtonIsEnabled(),\\n        )\\n    })\\n})\\n```\\n\\nFinally, include a basic HTML template `index.html` for the testing page, \\nand create an entry point (index.tsx) for rendering React components.\\n\\n```html title=\\"./playwright/index.html\\"\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <title>Testing Page</title>\\n  </head>\\n  <body>\\n    <div id=\\"root\\"></div>\\n    <script type=\\"module\\" src=\\"index.tsx\\"><\/script>\\n  </body>\\n</html>\\n```\\n\\n```tsx title=\\"./playwright/index.tsx\\"\\nimport \'../src/app/globals.css\'\\n```\\n\\nWith everything set up, you can run the tests using `npm run test:ct`, \\nand find the Serenity-BDD report under `./target/site/serenity`.\\n\\nBefore committing the latest changes, update your `.gitignore` file:\\n\\n```yaml title=\\".gitignore\\"\\n# serenity-js\\n/target/site\\n\\n# playwright\\n/playwright-report\\n/playwright/.cache\\n```\\n\\nThis concludes our tutorial on simplifying component testing with React/Next.js, \\nPlaywright, and Serenity/JS. Happy testing!\\n\\n:::tip \\nYou can find a set of templates at the\\n[Serenity/JS GitHub repositories page](https://github.com/orgs/serenity-js/repositories), \\nincluding a [template for component testing with React](https://github.com/serenity-js/serenity-js-playwright-ct-react-template)\\n:::"},{"id":"concrete-examples","metadata":{"permalink":"/de/concrete-examples","source":"@site/blog/2024-02-18-concrete-examples.mdx","title":"Concrete Examples - Key to Software Collaboration","description":"Ever feel like your software teams are speaking different languages when it comes to define concrete examples? But here\'s the spoiler: there\'s no magical tool to solve it \u2014 just the power of collaboration. Get ready for a paradigm shift towards cohesive teamwork!","date":"2024-02-18T00:00:00.000Z","formattedDate":"18. Februar 2024","tags":[{"label":"agile","permalink":"/de/tags/agile"},{"label":"team","permalink":"/de/tags/team"},{"label":"cross-functional","permalink":"/de/tags/cross-functional"},{"label":"testing","permalink":"/de/tags/testing"},{"label":"examples","permalink":"/de/tags/examples"},{"label":"bdd","permalink":"/de/tags/bdd"}],"readingTime":2.755,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"concrete-examples","title":"Concrete Examples - Key to Software Collaboration","authors":["jang"],"tags":["agile","team","cross-functional","testing","examples","bdd"]},"unlisted":false,"prevItem":{"title":"Component Testing with React/Next.js, Playwright, and Serenity/JS","permalink":"/de/sjs-playwright-ct"},"nextItem":{"title":"Serenity/JS - Migrate from Protractor to Playwright","permalink":"/de/serenityjs-protractor2playwright"}},"content":">***Ever feel like your software teams are speaking different languages when it comes to define concrete examples? But here\'s the spoiler: there\'s no magical tool to solve it \u2014 just the power of collaboration. Get ready for a paradigm shift towards cohesive teamwork!***\\n\\nEffective collaboration among Developers, Testers, and Product Owners (POs) in software development is crucial for success. However, one common hurdle in this collaboration is the struggle to find concrete examples to guide development and testing.\\nOvercoming this challenge requires **patience**, **training**, and a **team-driven approach**\\n, without imposing strict directives.\\n\\n![samples from interior desing](/img/interior-design-1508276_1280.jpg)\\n_Image by [martynaszulist](https://pixabay.com/users/martynaszulist-1055898/)_\\n\\n**The Reasons Behind the Struggle**\\n\\nFirst and foremost it\'s important to understand the reasons behind this struggle. Here are some of them:\\n\\n1. **Unclear Requirements**: Incomplete or vague requirements lead to confusion and differing interpretations, making it hard to articulate clear examples.\\n\\n2. **Communication Barriers**: Technical differences, language nuances, or cultural diversity can hinder clear communication, causing misunderstandings in example definition.\\n\\n3. **Differing Perspectives**: Each stakeholder brings unique viewpoints, sometimes leading to discordance and difficulty in agreeing on examples.\\n\\n4. **Assumptions and Implicit Knowledge**: Unspoken assumptions can obscure clarity and perpetuate misunderstandings.\\n\\n5. **Complexity of Features**: Some features are inherently complex, making it challenging to cover all scenarios with concise examples.\\n\\n6. **Time Constraints**: Pressures to deliver quickly can limit thorough discussion and exploration of examples.\\n\\n7. **Inadequate Documentation**: Poorly documented or outdated examples add to confusion and inconsistency.\\n\\n**Steps to Overcome the Struggle**\\n\\n1. **Clarify Requirements Collaboratively**: Hold regular refinement sessions where team members openly discuss and clarify requirements, fostering an environment where everyone\'s input is valued.\\n\\n2. **Use Techniques for Requirement Elicitation**: Employ methods like user story mapping and behavior-driven development to uncover hidden requirements and ensure alignment with user needs.\\n\\n3. **Document and Maintain Examples**: Establish a shared repository for documenting examples, ensuring accessibility and encouraging everyone to contribute and maintain it for consistency.\\n\\nBy taking these steps, teams can enhance collaboration, improve communication, and overcome the challenge of finding examples effectively in software development.\\n\\n**The Fear of Incomplete Examples**\\n\\nWhile collaboration is key, it\'s important to acknowledge the hesitancy some stakeholders\\nmay have in providing examples. They sometimes fear that the examples they give might not fully\\ncapture the complexities of the final solution.\\n\\nThey understand that an example is just that \u2014 an example \u2014 and worry that it may not\\nencompass every aspect of the desired outcome. \\nHowever, it\'s essential to emphasize to stakeholders that starting with simple, \\nstraightforward examples is a crucial first step. \\n\\nThese initial examples lay the foundation upon which more complex scenarios can be built\\nin subsequent iterations. By understanding that examples are iterative and can evolve over\\ntime, stakeholdes can feel more confident in contributing to the collaborative process.\\n\\n**Conclusion**\\n\\nThe ability to define concrete examples is a cornerstone of effective collaboration.\\nBy acknowledging the hurdles and embracing the power of teamwork, teams can transcend\\nlanguage barriers and navigate through the complexities of requirements with confidence.\\nThrough iterative refinement, stakeholders can contribute valuable insights,\\nensuring that examples evolve to accurately reflect the desired outcomes.\\n\\nSo, while there may not be a magical tool to solve the challenge of defining examples,\\nthe collective efforts of dedicated teams pave the way for innovation, efficiency,\\nand ultimately, the delivery of exceptional software solutions."},{"id":"serenityjs-protractor2playwright","metadata":{"permalink":"/de/serenityjs-protractor2playwright","source":"@site/blog/2024-02-04-sjs-protractor2playwright.mdx","title":"Serenity/JS - Migrate from Protractor to Playwright","description":"*When I chose Serenity/JS as a vendor-agnostic API, my intention was to isolate my test specification from the test runner.","date":"2024-02-04T00:00:00.000Z","formattedDate":"4. Februar 2024","tags":[{"label":"testing","permalink":"/de/tags/testing"},{"label":"automation","permalink":"/de/tags/automation"},{"label":"serenity-js","permalink":"/de/tags/serenity-js"},{"label":"hands-on","permalink":"/de/tags/hands-on"}],"readingTime":4.47,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"serenityjs-protractor2playwright","title":"Serenity/JS - Migrate from Protractor to Playwright","authors":["jang"],"tags":["testing","automation","serenity-js","hands-on"]},"unlisted":false,"prevItem":{"title":"Concrete Examples - Key to Software Collaboration","permalink":"/de/concrete-examples"},"nextItem":{"title":"HTML Tables in Browser Automation Using Serenity/JS and Playwright","permalink":"/de/serenityjs-tables-peql"}},"content":">***When I chose Serenity/JS as a vendor-agnostic API, my intention was to isolate my test specification from the test runner.\\nToday, I seamlessly transitioned from Protractor to Playwright in less than 10 minutes. \\nThe kicker? No need for me, any AI, or non-AI tool to lay a finger on selectors or test specs. \\nAll it took was a swift config update.***\\n\\nIn this blog post, we\'ll explore a seamless transition from Protractor to Playwright\\nin a Serenity/JS project, all achieved in a mere 10 minutes. Witness how the power \\nof Serenity/JS makes this migration effortless, requiring no modifications to your \\nselectors or Jasmine test specifications. Let\'s dive in and unlock a smoother,\\nmore efficient testing experience.\\n\\n![Serentiy/JS](/img/serenity-js-social-card.jpg)\\n\\n:::tip Any browser, any device, any interface\\n\xab[Serenity/JS](https://serenity-js.org/) is a modular and extensible abstraction \\nlayer that works seamlessly with integration tools like Playwright, \\nSelenium, WebdriverIO, Appium, or Axios, and gives you a consistent, \\nintuitive, and vendor-agnostic API to work with.\xbb\\n:::\\n\\n## Prepare Example project\\n\\n_(Example on this page was tested with Serenity/JS version 3.16.0)_\\n\\nLet\'s start by setting up a small example project based on the Protractor with Jasmine \\ntemplate provided by Serenity/JS, as this combination was the most common.\\n\\nClone the [serenity-js-jasmine-protractor-template](https://github.com/serenity-js/serenity-js-jasmine-protractor-template), \\ninstall the NodeJS dependencies, and start a test run to ensure that the template is working.\\n\\n```sh\\ngit clone https://github.com/serenity-js/serenity-js-jasmine-protractor-template.git\\ncd serenity-js-jasmine-protractor-template\\nnpm install\\nnpm test\\n```\\n## Migration\\n\\n### Additional Dependencies\\n\\nAdd additional dependencies to your project:\\n\\n```sh\\nnpm install @serenity-js/playwright\\nnpm install playwright\\nnpm install mocha\\nnpm install @serenity-js/mocha\\n```\\n\\nInstall Playwright:\\n```sh\\nnpx playwright install\\n```\\n\\n### Mocha Configuration\\n\\nAdd a `.mocharc.yml` file to the root directory of you project:\\n\\n```yml title=\\".mocharc.yml\\"\\ncheck-leaks: false\\ncolor: true\\ndiff: true\\nfull-trace: true\\nreporter: \'@serenity-js/mocha\'\\nrequire:\\n  - \'ts-node/register\'\\n  - \'src/serenity.config.ts\'\\ntimeout: 30000\\nv8-stack-trace-limit: 100\\nspec:\\n  - \'./spec/**/*.spec.ts\'\\n```\\n### Serenity/JS Actors\\n\\nCreate a `src` folder in your project root and create an `Actors.ts` file:\\n\\n```ts title=\\"./src/Actors.ts\\"\\nimport { Actor, Cast, TakeNotes } from \'@serenity-js/core\';\\nimport { BrowseTheWebWithPlaywright, PlaywrightOptions } from \'@serenity-js/playwright\';\\nimport { CallAnApi } from \'@serenity-js/rest\';\\nimport * as playwright from \'playwright-core\';\\n\\nexport class Actors implements Cast {\\n    constructor(\\n        private readonly page: playwright.Page,\\n        private readonly options: PlaywrightOptions,\\n    ) {\\n    }\\n\\n    prepare(actor: Actor): Actor {\\n        return actor.whoCan(\\n            BrowseTheWebWithPlaywright.usingPage(this.page, this.options),\\n            TakeNotes.usingAnEmptyNotepad(),\\n            CallAnApi.at(this.options.baseURL)\\n        );\\n    }\\n}\\n```\\n:::tip Remark\\nThere are two ways to give an actor the ability \\nto [BrowseTheWebWithPlaywright](https://serenity-js.org/api/playwright/class/BrowseTheWebWithPlaywright/):\\n1. `.using(browser)`\\n\\nA new browser instance is created for every `it` block in your Mocha `*.spec.ts` file. \\nThis means you **cannot access** a page you\'ve navigated to in your first `it` block \\nin your second `it` block.\\n\\n2. `.usingPage(page)`\\n\\nThe browser instance, or Playwright page instance, will be re-used for the entire\\n`*.spec.ts` file. \\nThis means you **can access** a page you\'ve navigated to in your first `it` block in \\nyour second `it` block.\\n:::\\n\\n### Serenity/JS Configuration\\n\\nCreate a `serenity.config.ts` file in the same `src` folder.\\n\\n```ts title=\\"./src/serenity.config.ts\\"\\nimport { configure, Duration, NoOpDiffFormatter } from \'@serenity-js/core\';\\nimport { BrowserContextOptions } from \'playwright\';\\nimport * as playwright from \'playwright-core\';\\n\\nimport { Actors } from \'./Actors\';\\n\\nlet browser: playwright.Browser;\\nlet page: playwright.Page;\\n\\nexport const mochaHooks = {\\n    async beforeAll(): Promise<void> {\\n        browser = await playwright.chromium.launch({\\n            headless: false\\n        });\\n\\n        const contextOptions : BrowserContextOptions = { baseURL: \'https://serenity-js.org\' }\\n        const context = await browser.newContext(contextOptions);\\n        page = await context.newPage();\\n\\n        configure({\\n            actors: new Actors(page, {\\n                defaultNavigationTimeout:   Duration.ofSeconds(2).inMilliseconds(),\\n                defaultTimeout:             Duration.ofMilliseconds(750).inMilliseconds(),\\n            }),\\n            diffFormatter: new NoOpDiffFormatter(),\\n            crew: [\\n                \'@serenity-js/console-reporter\',\\n                [ \'@serenity-js/serenity-bdd\',          { specDirectory: \'spec\' }], \\n                [ \'@serenity-js/web:Photographer\',      { strategy: \'TakePhotosOfInteractions\'    } ],\\n                [ \'@serenity-js/core:ArtifactArchiver\', { outputDirectory: \'target/site/serenity\' } ],\\n            ]\\n        });\\n    },\\n\\n    async afterAll(): Promise<void> {\\n        if (browser) {\\n            await browser.close()\\n        }\\n    }\\n}\\n```\\n\\nIn our example `Actors` class, we initiate a `Browser` object, create a new\\n`Context` with a new `Page` and give the `Actor` the `Ability` to interact\\nwith this page.\\n\\n### Angular Sychronisation in Non-Angular Project\\n\\nIn the `serenity-js_website.spec.ts` example file, remove the `UseAngularSynchronisation`, as the page we\'re\\ninteracting with is not even an Angular page.\\n\\nUncomment the following line in `protractor.conf.ts`. so we will be able to use\\nProtractor and Playwright side by side.\\n\\n```js title=\\"./protractor.conf.js\\"\\n    onPrepare: function() {\\n         ...\\n         browser.waitForAngularEnabled(false);\\n    },\\n```\\n### Additional npm Scripts\\n\\nIn the script section of your `package.json` and two new scripts:\\n\\n```json title=\\"./package.json\\"\\n...\\n  \\"scripts\\": {\\n    ...\\n    \\"test:execute:playwright\\": \\"mocha --config .mocharc.yml\\",\\n    \\"test:playwright\\": \\"failsafe clean test:execute:playwright test:report\\",\\n    ... \\n  }\\n```\\n\\n## First Testrun Using Playwright\\n\\nCongratulations! You\'re done. Just run `npm run test:playwright`.\\nYou can still run the tests with Protractor by running `npm test`. \\nIf you\'re satisfied with Playwright, you can remove all dependencies\\nfrom Protractor and Jasmine from your project now.\\n\\n:::tip Mocha vs. Playwright Test\\nIn this scenario, we use Mocha as the test runner for Playwright,\\ninstead of the native Playwright test runner.\\nMigration to the Playwright test runner may also be straightforward,\\nbut you will have to replace some imports in your files.\\nFor more information, refer to the \\n[Serenity/JS handbook](https://serenity-js.org/handbook/test-runners/playwright-test/#examples-and-project-templates)\\n:::\\n\\n## Conclusion\\n\\nIn just a brief span, we\'ve navigated the transition from Protractor to Playwright\\nwith Serenity/JS. The beauty lies not just in the simplicity of the process but in \\nthe retained integrity of your existing codebase. As you embark on your testing \\nendeavors with this upgraded setup, feel empowered by the speed, efficiency, \\nand flexibility now at your fingertips. The synergy of Serenity/JS\'s familiarity, \\nPlaywright\'s power, and Serenity/JS\'s adaptability ensures a testing ecosystem \\nthat not only meets but exceeds your expectations. Happy testing!"},{"id":"serenityjs-tables-peql","metadata":{"permalink":"/de/serenityjs-tables-peql","source":"@site/blog/2024-01-28-sjs-tables-peql.mdx","title":"HTML Tables in Browser Automation Using Serenity/JS and Playwright","description":"Unravel the Complexity of HTML Table Automation with Serenity/JS and Playwright! Tired of wrestling with hierarchical selectors? Serenity/JS introduces the Page Element Query Language (PEQL), making HTML table automation a breeze. Dive into hands-on examples, from pinpointing rows by index to dynamically locating them based on content. Empower your web automation journey with Serenity/JS \u2013 where simplicity meets precision!","date":"2024-01-28T00:00:00.000Z","formattedDate":"28. Januar 2024","tags":[{"label":"testing","permalink":"/de/tags/testing"},{"label":"automation","permalink":"/de/tags/automation"},{"label":"serenity-js","permalink":"/de/tags/serenity-js"},{"label":"hands-on","permalink":"/de/tags/hands-on"}],"readingTime":4.63,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"serenityjs-tables-peql","title":"HTML Tables in Browser Automation Using Serenity/JS and Playwright","authors":["jang"],"tags":["testing","automation","serenity-js","hands-on"]},"unlisted":false,"prevItem":{"title":"Serenity/JS - Migrate from Protractor to Playwright","permalink":"/de/serenityjs-protractor2playwright"},"nextItem":{"title":"The Role of Testers in Cross-Functional Teams","permalink":"/de/skills_before_role"}},"content":">***Unravel the Complexity of HTML Table Automation with Serenity/JS and Playwright! Tired of wrestling with hierarchical selectors? Serenity/JS introduces the Page Element Query Language (PEQL), making HTML table automation a breeze. Dive into hands-on examples, from pinpointing rows by index to dynamically locating them based on content. Empower your web automation journey with Serenity/JS \u2013 where simplicity meets precision!***\\n## Automating HTML Tables with Serenity/JS\\n\\nIf you\'re dealing with web automation and HTML tables, \\n[Serenity/JS](https://serenity-js.org/) provides a powerful and expressive way to interact with page elements. \\n\\nTraditional HTML selectors, such as those\\nbased on CSS or XPath, are often hierarchical. \\nHowever, tables are conceptually two-dimensional, \\nwith rows and columns, making it less straightforward \\nto express certain queries using these selectors.\\n\\n![Serentiy/JS](/img/serenity-js-social-card.jpg)\\n\\nIn this article, we\'ll explore the usage of the \\n[Page Element Query Language (PEQL)](https://serenity-js.org/handbook/web-testing/page-element-query-language/)\\nin Serenity/JS for automating HTML tables, focusing on \\n- scenarios where you know the index of the row you want to access and \\n- situations where you need to locate a row based on its content.\\n\\n:::tip\\nExamples on this page where tested with Serenity/JS version 3.15.0.\\nTo get started with Serenity/JS and Playwright have a look into the\\n[Serenity/JS Playwright project template](https://github.com/serenity-js/serenity-js-playwright-test-template).\\n\\n[Serenity/JS](https://serenity-js.org/) is a modular and extensible abstraction layer that works seamlessly \\nwith integration tools like Playwright, Selenium, WebdriverIO, Appium, or Axios, \\nand gives you a consistent, intuitive, and vendor-agnostic API to work with.\\nIt integrates with popular test runners like Cucumber, Jasmine, Mocha, and Playwright Test.\\n\\nHave a look into the other [Serenity/JS project templates](https://serenity-js.org/handbook/getting-started/project-templates/) as well.\\n:::\\n\\n\\n## Knowing the Index of the Row\\n\\n![Example Table](/img/Example-Table.png)\\n\\nConsider a scenario where you have a simple table, like [this one from w3schools.com](https://www.w3schools.com/html/html_tables.asp), and you know the index of the row you want to access.\\n\\n```html\\n<table>\\n  <tr>\\n    <th>Company</th>\\n    <th>Contact</th>\\n    <th>Country</th>\\n  </tr>\\n  <tr>\\n    <td>Alfreds Futterkiste</td>\\n    <td>Maria Anders</td>\\n    <td>Germany</td>\\n  </tr>\\n  <tr>\\n    <td>Centro comercial Moctezuma</td>\\n    <td>Francisco Chang</td>\\n    <td>Mexico</td>\\n  </tr>\\n  <tr>\\n    <td>Ernst Handel</td>\\n    <td>Roland Mendel</td>\\n    <td>Austria</td>\\n  </tr>\\n  <tr>\\n    <td>Island Trading</td>\\n    <td>Helen Bennett</td>\\n    <td>UK</td>\\n  </tr>\\n  <tr>\\n    <td>Laughing Bacchus Winecellars</td>\\n    <td>Yoshi Tannamuri</td>\\n    <td>Canada</td>\\n  </tr>\\n  <tr>\\n    <td>Magazzini Alimentari Riuniti</td>\\n    <td>Giovanni Rovelli</td>\\n    <td>Italy</td>\\n  </tr>\\n</table>\\n```\\n\\n The following example demonstrates how to use Serenity/JS to interact with the table:\\n\\n```typescript\\nimport { Ensure, equals } from \'@serenity-js/assertions\';\\nimport { describe, it } from \'@serenity-js/playwright-test\';\\nimport { By, Navigate, PageElements, Text } from \'@serenity-js/web\';\\n\\nconst CustomersTable = () => PageElement.located(By.css(\'#customers\'))\\n    .describedAs(\'customer table\')\\n\\nconst TableRows = () => PageElements.located(By.css(\'tr\'))\\n    .describedAs(\'all table rows\').of(CustomersTable());\\n\\nconst TableColumns = () => PageElements.located(By.css(\'td\'))\\n    .describedAs(\'all table columns\')\\n    .of(CustomersTable())\\n\\nconst TableColumnsInRow = (index: number) => \\n    TableColumns().of(TableRows().nth(index));\\n\\nconst CompanyInRow = (index: number) => TableColumnsInRow(index).nth(0)\\n    .describedAs(`company column in row ${index}`);\\n\\nconst ContactInRow = (index: number) => TableColumnsInRow(index).nth(1)\\n    .describedAs(`contact column in row ${index}`);\\n\\nconst CountryInRow = (index: number) => TableColumnsInRow(index).nth(2)\\n    .describedAs(`country column in row ${index}`);\\n\\ndescribe(\'table selector\', () => (\\n    it(\'ensures text of columns in a row\', async ({actor}) => (\\n        actor.attemptsTo(\\n            Navigate.to(\'https://www.w3schools.com/html/html_tables.asp\'),\\n            Ensure.that(Text.of(CompanyInRow(1)), equals(\'Alfreds Futterkiste\')),\\n            Ensure.that(Text.of(ContactInRow(1)), equals(\'Maria Anders\')),\\n            Ensure.that(Text.of(CountryInRow(1)), equals(\'Germany\'))\\n        ))\\n    )\\n));\\n```\\nThe output in the Serenity/JS report will look like follows:\\n\\n```\\n\u2713 Alice ensures that the text of company column in row 1 does equal \'Alfreds Futterkiste\'\\n\u2713 Alice ensures that the text of contact column in row 1 does equal \'Maria Anders\'\\n\u2713 Alice ensures that the text of country column in row 1 does equal \'Germany\'\\n```\\n## Unknown Row Index: Locating Rows by Content\\n\\nIn some scenarios, the table\'s sort order might not be defined, and the index of the row under test may vary. In such cases, you can locate a row based on expected content. Let\'s say we want to ensure that the contact name for \\"Centro comercial Moctezuma\\" in Mexico equals \\"Francisco Chang.\\" Here\'s how you can achieve this with Serenity/JS:\\n\\n```typescript\\nimport { contain, Ensure, equals } from \'@serenity-js/assertions\';\\nimport { describe, it } from \'@serenity-js/playwright-test\';\\nimport { By, Navigate, PageElement, PageElements, Text } from \'@serenity-js/web\';\\n\\nconst CustomersTable = () => PageElement.located(By.css(\'#customers\'))\\n    .describedAs(\'customer table\')\\n\\nconst TableRows = () => PageElements.located(By.css(\'tr\'))\\n    .describedAs(\'all table rows\').of(CustomersTable());\\n\\nconst CompanyColumns = () => PageElements.located(By.css(\'td:nth-child(1)\'))\\n    .describedAs(\'company columns\');\\n\\nconst ContactColumns = () => PageElements.located(By.css(\'td:nth-child(2)\'))\\n    .describedAs(\'contact columns\');\\n\\nconst CountryColumns = () => PageElements.located(By.css(\'td:nth-child(3)\'))\\n    .describedAs(\'country columns\');\\n\\nconst ContactColumByCountryAndCompany = (country: string, company: string) => \\n    ContactColumns().of(\\n        TableRows()\\n            .where(Text.ofAll(CountryColumns()), contain(country))\\n            .where(Text.ofAll(CompanyColumns()), contain(company))\\n            .first())\\n        .first();\\n\\ndescribe(\'table selector\', () => (\\n    it(\'ensures text of columns in a row\', async ({actor}) => (\\n        actor.attemptsTo(\\n            Navigate.to(\'https://www.w3schools.com/html/html_tables.asp\'),\\n            Ensure.that(Text.of(ContactColumByCountryAndCompany(\\n                \'Mexico\',\'Centro comercial Moctezuma\')),\\n            equals(\'Francisco Chang\'))\\n        ))\\n    )\\n));\\n```\\n\\nIn this example, we introduce new `PageElements` such as `CompanyColumn`, `ContactColumn`, and `CountryColumn` to represent individual columns. The `ContactColumByCountryAndCompany` function is used to locate the contact column by matching the country and company. We utilize the `where` method to filter rows based on the content of the country and company columns and then take the first result.\\n\\nThe report remains readable domain specific language:\\n\\n```\\n\u2713 Alice navigates to \'https://www.w3schools.com/html/html_tables.asp\'\\n\u2713 Alice ensures that the text of the first of contact columns \\n    of the first of all table rows of customer table where the \\n    text of country columns does contain \'Mexico\' and the text \\n    of company columns does contain \'Centro comercial Moctezuma\' \\n    does equal \'Francisco Chang\'\\n```\\n\\nIt\'s important to note that in this use case, we assume there is only one result for the given combination of country and company. Therefore, we always take the first result to ensure consistency.\\n\\nBy using Serenity/JS and the [Page Element Query Language (PEQL)](https://serenity-js.org/handbook/web-testing/page-element-query-language/), you can create expressive and maintainable test scripts for HTML table automation. These examples showcase how to handle scenarios where you know the row index and when you need to locate rows based on their content, providing a flexible and powerful solution for web automation."},{"id":"skills_before_role","metadata":{"permalink":"/de/skills_before_role","source":"@site/blog/2024-01-21-skills_before_role.mdx","title":"The Role of Testers in Cross-Functional Teams","description":"Are cross-functional teams missing out on excellence by expecting everyone to be a master of everything? Challenge the misconception, embrace testers\' specialized skills, and discover how prioritizing individual strengths over rigid roles sparks innovation in software development.","date":"2024-01-21T00:00:00.000Z","formattedDate":"21. Januar 2024","tags":[{"label":"agile","permalink":"/de/tags/agile"},{"label":"team","permalink":"/de/tags/team"},{"label":"cross-functional","permalink":"/de/tags/cross-functional"},{"label":"testing","permalink":"/de/tags/testing"}],"readingTime":2.73,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"skills_before_role","title":"The Role of Testers in Cross-Functional Teams","authors":["jang"],"tags":["agile","team","cross-functional","testing"]},"unlisted":false,"prevItem":{"title":"HTML Tables in Browser Automation Using Serenity/JS and Playwright","permalink":"/de/serenityjs-tables-peql"},"nextItem":{"title":"Does Customer Knows Best?","permalink":"/de/customer-know-best"}},"content":">***Are cross-functional teams missing out on excellence by expecting everyone to be a master of everything? Challenge the misconception, embrace testers\' specialized skills, and discover how prioritizing individual strengths over rigid roles sparks innovation in software development.***\\n\\n**Embracing Diversity in Skillsets: The Role of Testers in Cross-Functional Teams**\\n\\nIn the evolving landscape of software development, the discourse often revolves around the structure of teams and the significance of individual roles. However, it\'s crucial to move beyond fixed roles and recognize the diverse skills and abilities each team member brings to the table. One area that deserves attention in this discussion is the role of testers within cross-functional teams.\\n\\n![business man holding mask](/img/mask-3829017_1280.jpg)\\n_Image by [geralt](https://pixabay.com/users/geralt-9301/)_\\n\\n**Breaking the Mold: Testers in Cross-Functional Teams**\\n\\nTraditionally, there has been a debate about whether dedicated testers are necessary in agile and cross-functional teams. Some argue that every team member should be adept at testing, blurring the lines between roles. However, a more nuanced perspective acknowledges the unique expertise that testers bring to the development process.\\n\\n**Complementary Strengths: The Tester\'s Contribution**\\n\\nIn a comprehensive approach to team dynamics, the focus is on building teams with a mix of skills tailored to specific goals. Testers, with their specialized knowledge in quality assurance and testing methodologies, play a crucial role in ensuring the robustness of the software. Their ability to identify and address potential issues adds a layer of quality that may be challenging for a non-specialist to replicate.\\n\\n**Dispelling Misunderstandings: Testing as a Specialized Skill**\\n\\nOne common misunderstanding within discussions about cross-functional teams is the belief that every team member needs to be equally skilled in every aspect of software development. This misconception can lead to inflexible views on how teams work and hinder their potential. Acknowledging testing as a specialized skill dispels the notion that all team members need to be testing experts. Instead, it emphasizes the importance of collaboration, where testers and developers work together to achieve a balance between speed and quality.\\n\\n**People-Centric Collaboration: Recognizing Individual Competencies**\\n\\nShifting the conversation from rigid roles to celebrating individuals and their capabilities is particularly relevant when discussing testers. By recognizing the unique skills that testers bring, teams can foster a collaborative culture where the focus is on complementing strengths rather than conforming to a one-size-fits-all approach.\\n\\n**Fostering Innovation: The Tester\'s Role in Building Quality Software**\\n\\nIn the pursuit of innovation, having a dedicated focus on quality is paramount. Testers contribute to this by conducting thorough testing, identifying potential risks, and ensuring that the software meets the highest standards. Embracing a mix of skills, including the specialized expertise of testers, allows teams to create innovative solutions without compromising on quality.\\n\\n**Conclusion: Celebrating Diversity for Collaborative Success**\\n\\nIn the ever-changing landscape of software development, the emphasis should be on recognizing and celebrating the diverse skills within cross-functional teams. Testers, with their unique expertise, play a vital role in enhancing the overall quality of the software. By dispelling the misunderstanding that cross-functional teams must have equal expertise in every area, teams can foster a culture that values individual competencies, truly embracing the richness that a diverse mix of skills brings to collaborative efforts. It\'s time to appreciate the integral role of testers and move towards a more inclusive and effective approach to cross-functional team dynamics."},{"id":"customer-know-best","metadata":{"permalink":"/de/customer-know-best","source":"@site/blog/2024-01-14-customer-knows-best.mdx","title":"Does Customer Knows Best?","description":"Unlock the true potential of your ongoing software projects by embracing the richness of customer diversity. Discover how acknowledging varied goals and distinguishing between aspirations and requirements can reshape your development journey. It\'s time to move beyond the one-size-fits-all approach and foster a collaborative environment that transforms customer input into a tailored roadmap for success.","date":"2024-01-14T00:00:00.000Z","formattedDate":"14. Januar 2024","tags":[{"label":"requierements","permalink":"/de/tags/requierements"},{"label":"goals","permalink":"/de/tags/goals"},{"label":"customer","permalink":"/de/tags/customer"}],"readingTime":3.855,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"customer-know-best","title":"Does Customer Knows Best?","authors":["jang"],"tags":["requierements","goals","customer"]},"unlisted":false,"prevItem":{"title":"The Role of Testers in Cross-Functional Teams","permalink":"/de/skills_before_role"},"nextItem":{"title":"Testing Challenges in Complex Setup","permalink":"/de/excel-in-complex-setups"}},"content":">***Unlock the true potential of your ongoing software projects by embracing the richness of customer diversity. Discover how acknowledging varied goals and distinguishing between aspirations and requirements can reshape your development journey. It\'s time to move beyond the one-size-fits-all approach and foster a collaborative environment that transforms customer input into a tailored roadmap for success.***\\n\\nIn the dynamic realm of software development, the maxim \\"customer knows best\\" has long been a guiding principle in requirements engineering. \\nHowever, as we navigate ongoing projects with a sense that they could benefit from a reevaluation, it becomes evident that assuming a singular, \\nall-knowing customer is a myth that can complicate rather than facilitate effective software development.\\n\\nThis article seeks to delve into the challenges arising from the assumption of homogeneous customer knowledge and proposes actionable strategies to address these complexities within the context of projects that may require a recalibration.\\n\\n![a burning dart](/img/dart-1943313_1280.jpg)\\n_Image by [MasterTux](https://pixabay.com/de/users/mastertux-470906/)_\\n\\n**The Myth of Homogeneous Customer Knowledge**\\n\\nThe potential pitfall of adhering too strictly to the \\"customer knows best\\" mantra lies in the assumption of a uniform customer knowledge base. In reality, customers often constitute a diverse group with varying goals, perspectives, and priorities. This diversity poses a significant challenge in transforming their input into concrete requirements.\\n\\n*Action Point 1: Acknowledging Diversity*\\n- Recognize and appreciate the diversity within the customer group.\\n- Understand that each stakeholder brings a unique set of goals, expectations, and constraints to the table.\\n\\n*Action Point 2: Stakeholder Mapping*\\n- Develop a comprehensive stakeholder map, identifying different departments, roles, and levels within the organization.\\n- Use this map to visualize and understand the diverse perspectives that need to be reconciled during the requirements engineering process.\\n\\n**Goals vs. Requirements**\\n\\nWhile the adage \\"customer knows best\\" emphasizes the importance of customer input in requirements engineering, it\'s crucial to discern between high-level goals and concrete requirements. Customers often express overarching aspirations like \\"increase efficiency\\" or \\"improve user satisfaction.\\" However, these aspirations lack the specificity required for effective software development.\\n\\nA common challenge arises when customers, in an attempt to articulate their goals, inadvertently propose requirements that may not effectively fulfill those aspirations. This gap underscores the need for guidance in translating broad goals into tangible, actionable requirements.\\n\\n_Action Point 3: Goal-to-Requirement Translation_\\n\\n- Establish a structured process for translating overarching goals into specific and measurable requirements.\\n- Engage in collaborative workshops with stakeholders to distill broad goals into requirements that directly contribute to achieving those goals.\\n\\n_Action Point 4: Customer Guidance on Requirement Formulation_\\n\\n- Facilitate open communication with customers to ensure a clear understanding of their goals and expectations.\\n- Provide guidance to customers in formulating requirements that align with and effectively contribute to achieving their stated goals.\\n\\nBy differentiating between goals and requirements and offering guidance in the translation process, the development team can ensure that the final set of requirements not only captures customer aspirations accurately but also lays the groundwork for a successful and goal-oriented software development process.\\n\\n**Conflicting Goals and Priorities**\\n\\nThe existence of conflicting goals and priorities within the customer group further complicates the process. Different departments may have divergent objectives, and individual stakeholders may prioritize features differently based on their roles and responsibilities.\\n\\n*Action Point 5: Open Communication and Negotiation*\\n- Foster an environment of open communication between development teams and customers.\\n- Initiate regular check-ins and feedback sessions to identify and address conflicting goals and priorities.\\n- Establish a framework for negotiation and compromise that aligns with the overarching project objectives.\\n\\n**The Importance of Collaboration**\\n\\nTo overcome the challenges posed by the diversity of customer perspectives, effective collaboration between development teams and customers is paramount.\\n\\n*Action Point 6: Collaborative Techniques*\\n- Utilize collaborative techniques such as workshops, interviews, and prototyping to facilitate a shared understanding of requirements.\\n- Ensure that all stakeholders have a platform to voice their concerns and actively participate in the requirements engineering process.\\n\\nIn conclusion, while the customer\'s input remains invaluable in the requirements engineering process, it is crucial to move beyond the simplistic notion that \\"customer knows best.\\" By acknowledging diversity, translating goals into requirements, addressing conflicting priorities, and fostering collaboration, development teams can navigate the complexities inherent in customer knowledge within the ongoing context of their projects.\\n\\n**Reading Recommendation**\\n\\n - \\"Discovering Requirements: How to Specify Products and Services\\", book by Ian F. Alexander (2009)\\n> Do you need to know how to create good requirements?\\n> Discovering Requirements offers a set of simple, robust, and effective cognitive tools for building requirements. Using worked examples throughout the text, it shows you how to develop an understanding of any problem, leading to [the right] questions.\\""},{"id":"excel-in-complex-setups","metadata":{"permalink":"/de/excel-in-complex-setups","source":"@site/blog/2024-01-07-excel-complex-setups.mdx","title":"Testing Challenges in Complex Setup","description":"Are your testing strategies stuck in the complexity maze? Discover how to break free, navigate challenges, and build a robust testing framework that stands the test of time. Uncover the secrets to unified testing success \u2013 because in the world of software, mediocrity is the real bug.","date":"2024-01-07T00:00:00.000Z","formattedDate":"7. Januar 2024","tags":[{"label":"testing","permalink":"/de/tags/testing"},{"label":"one-team","permalink":"/de/tags/one-team"}],"readingTime":5.82,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"excel-in-complex-setups","title":"Testing Challenges in Complex Setup","authors":["jang"],"tags":["testing","one-team"]},"unlisted":false,"prevItem":{"title":"Does Customer Knows Best?","permalink":"/de/customer-know-best"},"nextItem":{"title":"Feel the Heartbeat of Software Testing","permalink":"/de/tester-vs-bot"}},"content":"> ***Are your testing strategies stuck in the complexity maze? Discover how to break free, navigate challenges, and build a robust testing framework that stands the test of time. Uncover the secrets to unified testing success \u2013 because in the world of software, mediocrity is the real bug.***\\n\\nIn the relentless pursuit of project deadlines, the consequences of compromising on testing often come to light post-implementation. The inevitable dawn of quality issues prompts a concerted effort to address testing challenges in a complex setup. However, in the urgency to salvage the project, the critical aspect of thorough and qualitative planning, with the objective of \\"building quality in,\\" often takes a back seat.\\n\\nWhen faced with unexpected quality issues in a complex setup involving \\n- multiple development teams, \\n- customizers, and\\n- a diverse customer base,\\n\\norganizations are compelled to navigate through coordinated testing challenges.\\n\\n![a team solving a puzzle](/img/integration-1777536_1280.jpg)\\n_Image by [geralt](https://pixabay.com/users/geralt-9301/)_\\n\\n## The Pitfalls of Testing Dynamics\\n\\n**Lack of Unified Test Concept**\\n\\nIn complex setups, there is often an overarching sense of \\"quality,\\" but primarily from a strategic perspective. The challenge arises from a lack of a unified test concept, as each team operates with its own testers under the charge of team leads, without a detailed test strategy covering the entirety of the software.\\n\\n**Missing \\"One Team\\" Sense in Testing**\\n\\nThe decentralized nature of testing across various teams and customizers contributes to a challenge in fostering a \\"one team\\" sense in testing. Each team may have its own quality assurance focus, leading to potential blind spots and overlooking critical interactions between components.\\n\\n**Coordinating Test Efforts**\\n\\nThe coordination of testing efforts becomes a challenge when decentralized teams operate with varied testing approaches. This dynamic makes it more difficult to ensure a comprehensive and cohesive testing strategy that spans the entire software architecture.\\n\\n**Insufficient Cross-Team Communication**\\n\\nThe absence of a unified test concept often translates into challenges related to cross-team communication. This siloed approach hampers the identification and resolution of cross-functional issues that can significantly impact the end-user experience.\\n\\n## The Tester\'s Voice: Fostering Consolidated Testing Insights\\n\\nTo address the challenges of coordinated testing in complex setups, it is crucial to elevate the voice of testers from all teams. Their insights and perspectives should be not only valued but celebrated, as they contribute to the creation of a powerful and consolidated image of the software\'s testing needs.\\n\\n**A Collaborative Approach**\\n\\nRather than relying on top-down decisions, embrace a collaborative approach where the voices of individual testers are heard, fostering a stronger sense of identification with the testing process. This not only enhances the quality of testing strategies but also empowers teams to take charge of their testing journey.\\n\\n**The Importance of Listening**\\n\\nListening to testers from diverse teams is not just about hearing their opinions; it\'s about acknowledging their unique insights and experiences. This approach empowers testers to shape the testing process, enriching it by uncovering potential blind spots and ensuring that the entire software architecture is thoroughly examined.\\n\\n## Empowering Teams\\n\\nEmpower teams with the autonomy to _shape_ their testing strategies. This not only builds a more resilient and effective testing framework but also instills a sense of ownership. When team members actively contribute to the planning and execution of testing efforts, their identification with the process becomes a powerful force.\\n\\n**A Holistic Approach Across Complex Setups**\\n\\nIn complex setups involving multiple development teams, customizers, and a diverse customer base, the \\"build quality in\\" approach should transcend individual responsibilities. Quality assurance should not be the sole responsibility of specific teams; instead, it should be an overarching principle embraced by every stakeholder in the process.\\n\\n**Building Quality In: A Collective Empowerment**\\n\\nRecognizing that quality cannot be tested into a product only after development but must be an intrinsic part of the entire chain is pivotal. Each development team, customizer, and customer plays a crucial role in this collective empowerment to build quality into the software from the ground up.\\n\\n## Conclusion: Quality Assurance Starts with Unified Planning and Empowerment\\nWhile the challenges of coordinated testing in complex setups may be intricate, it is imperative to recognize that the aftermath of quality issues demands more than a rushed search for test resources. The true solution lies in fostering a culture of qualitative planning, a collective commitment to building quality in, and an empowering environment where every tester\'s voice is not only heard but celebrated. This proactive approach not only mitigates risks but also lays the foundation for delivering software that stands the test of time.\\n\\n## Concrete Steps to Forge Unified Testing Success in Complex Environments\\n\\nHere\'s a short action list on how to overcome the challenges of coordinated testing in complex setups and empower testing excellence:\\n\\n**1. Establish a Unified Test Concept**\\n\\nDevelop a comprehensive test concept that spans the entire software architecture. Ensure that every team, including customizers and stakeholders, contributes to and aligns with this unified vision for testing.\\n\\n**2. Foster a Collaborative Testing Culture**\\n\\nPromote a culture of collaboration where testers from diverse teams actively engage with each other. Encourage open communication channels, knowledge sharing sessions, and cross-team workshops to foster a sense of unity in testing.\\n\\n**3. Implement Cross-Functional Testing Teams**\\n\\nConsider forming cross-functional testing teams that include members from different departments and teams. This approach helps break down silos and encourages a shared responsibility for testing excellence.\\n\\n**4. Emphasize Agile and Iterative Testing**\\n\\nImplement agile and iterative testing methodologies that allow for continuous feedback and adjustments. This approach accommodates changes, encourages flexibility, and ensures that testing efforts evolve alongside the development process.\\n\\n**5. Prioritize Test Automation**\\n\\nInvest in test automation to streamline repetitive tasks and enhance testing efficiency. Automated testing can provide quick feedback, reduce manual errors, and allow testers to focus on more complex and critical aspects of the software.\\n\\n**6. Conduct Regular Cross-Team Knowledge Sharing**\\n\\nOrganize regular knowledge-sharing sessions where testers from different teams present their findings, challenges, and best practices. This helps create a more informed testing community and enables cross-pollination of ideas.\\n\\n**7. Empower Testers with Decision-Making Authority**\\n\\nEmpower individual testers by providing them with decision-making authority over their testing strategies. This autonomy fosters a sense of ownership and encourages testers to proactively contribute to the testing process.\\n\\n**8. Implement Collaborative Testing Tools**\\n\\nUtilize collaborative testing tools that facilitate communication and cooperation among testers from different teams. Shared platforms can enhance visibility into testing activities, making it easier to coordinate efforts and share insights.\\n\\n**9. Encourage Continuous Learning**\\n\\nCreate an environment that values continuous learning and skill development for testers. Encourage participation in training programs, workshops, and industry events to stay updated on the latest testing practices and technologies.\\n\\n**10. Celebrate Testing Achievements**\\n\\nRecognize and celebrate testing achievements, whether big or small. Acknowledge the efforts of individual testers and teams to reinforce a positive and empowering testing culture.\\n\\nImplementing these actions can help organizations overcome the challenges of coordinated testing in complex setups, fostering a culture of collaboration, empowerment, and continuous improvement in testing excellence."},{"id":"tester-vs-bot","metadata":{"permalink":"/de/tester-vs-bot","source":"@site/blog/2023-12-31-tester-vs-bot.mdx","title":"Feel the Heartbeat of Software Testing","description":"If your approach to software testing consists of merely navigating through predefined test cases with specified inputs and expected outcomes, and your only action is to tick checkboxes without engaging in thorough testing, then you are not functioning as a tester; rather, you are akin to a bot.","date":"2023-12-31T00:00:00.000Z","formattedDate":"31. Dezember 2023","tags":[{"label":"testing","permalink":"/de/tags/testing"},{"label":"automation","permalink":"/de/tags/automation"}],"readingTime":2.545,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"tester-vs-bot","title":"Feel the Heartbeat of Software Testing","authors":["jang"],"tags":["testing","automation"]},"unlisted":false,"prevItem":{"title":"Testing Challenges in Complex Setup","permalink":"/de/excel-in-complex-setups"},"nextItem":{"title":"Wie man Software Tester wird","permalink":"/de/how"}},"content":"> ***If your approach to software testing consists of merely navigating through predefined test cases with specified inputs and expected outcomes, and your only action is to tick checkboxes without engaging in thorough testing, then you are not functioning as a tester; rather, you are akin to a bot.***\\n\\nIn the world of software testing, there\'s a big difference between doing the bare minimum and truly understanding what you\'re testing. Imagine this: instead of really digging into the software, a tester just goes through a set list of tests, checking boxes as they go. It might look like progress, but it\'s like scratching the surface without getting to the real stuff.\\n\\n![human finger touches robot finger](/img/tester-vs-bot.jpg)\\n_Image by [geralt](https://pixabay.com/users/geralt-9301/)_\\n\\n**The Ritual**\\n\\nPicture this as a ritual: a tester follows a set path, just ticking off boxes with specific inputs and expected results. It\'s like a dance, but instead of exploring the software\'s ins and outs, it\'s more like going through the motions.\\n\\n**The Misleading Idea**\\n\\nLet\'s clear something up: just ticking boxes doesn\'t equal effective testing. It might seem like things are getting done, but it doesn\'t go deep enough to find the hidden problems in the code.\\n\\n**Going Beyond**\\n\\nSoftware testing is an art. It\'s not just about following a script; it\'s about actively thinking and engaging with the software. Real testers don\'t stick to the script \u2013 they go off the beaten path, checking every corner for potential issues.\\n\\n**More Than Just Checking Boxes**\\n\\nGood testers don\'t rely only on checkboxes in a test execution plan. They bring in critical thinking, creativity, and a deep understanding of how the software works. Thorough testing means crafting tests that go beyond the obvious, thinking ahead, and making sure every part of the software gets a good look.\\n\\n**The Danger of Robotic Testing**\\n\\nWhen testing becomes mindless checkbox ticking, it\'s like being stuck in robot mode. The line between a real tester and an automated bot starts to blur. The human touch \u2013 the ability to adapt, think creatively, and find tricky issues \u2013 disappears.\\n\\n**Conclusion: Embracing  The Quality Journey**\\n\\nIn software testing, it\'s not just about getting through a checklist. It\'s a journey, a quest to really understand what makes the software tick. Let\'s move past the routine and embrace the heart of testing \u2013 an ever-evolving process that separates the real testers from the software bots.\\n\\n:::danger The Role of Regression Tests\\n\\nWhile advocating for a holistic approach and  the importance of moving beyond checkbox testing to truly understand and engage with software, it is crucial to acknowledge the value of reliable regression tests.\\n\\n**It is the combination of thoughtful, exploratory testing and robust regression testing that forms the backbone of a comprehensive quality assurance strategy.**   \\n\\nStriking this balance ensures not only the uncovering of new issues but also the preservation of the stability and reliability of the software over time. \\n\\nBe aware to recognize the moment to introduce automation into your testing strategy as a key consideration for maintaining an effective and efficient software testing process.\\n\\n:::"},{"id":"how","metadata":{"permalink":"/de/how","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-12-01-how-i-became-a-tester.md","title":"Wie man Software Tester wird","description":"Dar\xfcber, wie man Software Tester wird","date":"2022-12-01T00:00:00.000Z","formattedDate":"1. Dezember 2022","tags":[{"label":"SoftwareTesting","permalink":"/de/tags/software-testing"},{"label":"QualityAssurance","permalink":"/de/tags/quality-assurance"}],"readingTime":2.585,"hasTruncateMarker":false,"authors":[{"name":"Jan Graefe","title":"Autor","url":"https://jangraefe.de","imageURL":"img/jan.jpg","key":"jang"}],"frontMatter":{"slug":"how","title":"Wie man Software Tester wird","authors":["jang"],"tags":["SoftwareTesting","QualityAssurance"]},"unlisted":false,"prevItem":{"title":"Feel the Heartbeat of Software Testing","permalink":"/de/tester-vs-bot"}},"content":"## Dar\xfcber, wie man Software Tester wird\\n\\nNun, diese Frage kannst du eigentlich gleich googeln und du wirst viele richtige Antworten finden. \\n\\nAlso ist dies die Geschichte, wie **ich** Software Tester wurde.\\n\\nNachdem ich meine Fachhochschulausbildung vor 15+ Jahren erfolgreich beendet hatte, wurde ich von eine kleinen Software-Entwicklungsfirma angestellt. Sie war spezialisiert auf Software f\xfcr einen kleinen Markt im Rundfunkbereich. Die Software war sehr modular, hoch konfigurierbar and reich an Schnittstellen - entweder zu unseren eigenen Modulen oder zu Drittherstellern.\\n\\nMein Job war es, bei unsren Kunden vor Ort im Rahmen von Einf\xfchrungsprojekten, die Software zu installieren, zu konfigurieren und in Betrieb zu nehmen. Weiterhin stellte ich vom B\xfcro aus den Remote-Support sicher. Traten im Betrieb Fehler auf, war ich die erste Anlaufstelle f\xfcr den Kunden. \\n\\nZu dieser Zeit gab es in meinem Team weder einen Tester oder einen Testprozess. Es gab auch keinen klar definierten Releaseprozess. Die Entwickler testeten selber, sendeten Debug-Versionen (all in one *.exe Dateien) per E-Mail zum Kunden. Der Kunde probierte es dann aus und nahm die Version in Betrieb.\\n\\nDies war mein erster Kontakt mit einem Mantra, welches mich bis heute begleitet:\\n\\n> **\\"Der Kunde testet selbst! Er weiss ja am Besten, wie es funktionieren muss!\\"**\\n\\nWenn ich wieder im Support B\xfcro vor unserem Webportal sass, bekam ich dann aber irgendwie einen anderen Eindruck. Wenn der Kunde doch wusste, wie es funktionieren muss, warum nahm er dann immer wieder Versionen in Betrieb, die nach mehr oder eher weniger langer Betriebszeit Fehler verursachten?\\n\\nUnd warum waren die Kunden dann trotzdem so sauer und beschwerten sich \xfcber die Qualit\xe4t? Sie hatten diese doch selber gepr\xfcft. Mit ihren eigenen Gesch\xe4ftsprozessen. Und f\xfcr gut empfunden? Sonst h\xe4tten sie Version doch nicht in Betrieb genommen, oder?\\n\\nOkay, f\xfcr den Unterschied zwischen \\"testen\\" und \\"probieren\\" ben\xf6tigt es dann wohl mal einen eigenen Post... \\n\\nIch war es in jedem Fall leid, bei den Kunden st\xe4ndig Besserung zu geloben. Schlussendlich, waren es sicher auch unsere Kunden leid, mir das jedes Mal wieder aufs Neue zu glauben.\\n\\nNun hatte auch dieses kleine Software-Entwicklungs-Team schon einmal etwas vom Konzept des unabh\xe4ngigen Testens geh\xf6rt. Also Software vor der Auslieferung an den Kunden von einer zweiten Instanz (neben dem Entwickler selbst) testen zu lassen.\\n\\nIch fand das Thema sofort spannend. W\xfcrde es mir doch erm\xf6glichen, mich noch intensiver mit der Funktionsweise der Software auseinanderzusetzen. Auch w\xe4re ich dann im Support bei der Beantwortung der Fragen kompetenter. Wir w\xfcrden Fehler fr\xfcher finden. Wir w\xfcrden lernen, die Gesch\xe4ftsprozesse des Kunden besser zu verstehen. Alles in allem, auch eine bessere Qualit\xe4t liefern.\\n\\nSo begann also meine Karriere als Software Tester. Eine spannende Aufgabe mit viel Aufbauarbeit und einer steilen Lernkurve. \\n\\nPS:\\n\\nDas Testen in einem Team mit 5  - 6 Entwicklern is kein Teilzeitjob. Und ich hatte ja noch die anderen Aufgaben. Als dann die Auftragslage im Projektbereich wieder anzog, wurde mir klar, dass der Fokus nun wieder dorthin verlagert werden w\xfcrde.  Ich w\xfcrde so noch weniger Zeit f\xfcr das haben, was mir lieb geworden war. Somit entschloss ich mich, mich auch einen neuen Weg zu begeben und mich von nun an als Software Tester zu verdingen."}]}')}}]);