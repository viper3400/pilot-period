"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9897],{1253:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=t(5893),r=t(1151);const i={slug:"sjs-playwright-ct",title:"Component Testing with React/Next.js, Playwright, and Serenity/JS",authors:["jang"],tags:["testing","automation","serenity-js","hands-on","BDD"]},o=void 0,a={permalink:"/de/sjs-playwright-ct",source:"@site/blog/2024-02-25-sjs-playwright-ct.mdx",title:"Component Testing with React/Next.js, Playwright, and Serenity/JS",description:"*Continuing my series about Serenity/JS:",date:"2024-02-25T00:00:00.000Z",formattedDate:"25. Februar 2024",tags:[{label:"testing",permalink:"/de/tags/testing"},{label:"automation",permalink:"/de/tags/automation"},{label:"serenity-js",permalink:"/de/tags/serenity-js"},{label:"hands-on",permalink:"/de/tags/hands-on"},{label:"BDD",permalink:"/de/tags/bdd"}],readingTime:7.72,hasTruncateMarker:!1,authors:[{name:"Jan Graefe",title:"Autor",url:"https://jangraefe.de",imageURL:"img/jan.jpg",key:"jang"}],frontMatter:{slug:"sjs-playwright-ct",title:"Component Testing with React/Next.js, Playwright, and Serenity/JS",authors:["jang"],tags:["testing","automation","serenity-js","hands-on","BDD"]},unlisted:!1,nextItem:{title:"Concrete Examples - Key to Software Collaboration",permalink:"/de/concrete-examples"}},c={authorsImageUrls:[void 0]},l=[{value:"Setting Up an Example Application",id:"setting-up-an-example-application",level:2},{value:"Integrating Playwright and Serenity/JS",id:"integrating-playwright-and-serenityjs",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Continuing my series about Serenity/JS:\nDive into the potent pairing of Serenity/JS and Playwright.\nWitness how this winning combination revolutionizes component testing.\nReady to elevate your testing game?"})})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Playwright introduces an\n",(0,s.jsx)(n.a,{href:"https://playwright.dev/docs/test-components",children:"experimental component testing approach"}),".\nIn this tutorial, we'll explore how to seamlessly integrate component testing into a\nReact/Next.js application using Playwright in conjunction with\n",(0,s.jsx)(n.a,{href:"https://serenity-js.org/",children:"Serenity/JS"}),", a powerful testing framework."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serenity/JS",src:t(2418).Z+"",width:"2150",height:"682"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["This tutorial provides a step-by-step guide to set up and execute tests from scratch.\nHowever, if you prefer to skip these steps, you can access the complete example code in\n",(0,s.jsx)(n.a,{href:"https://github.com/viper3400/next-sjs-ct-tutorial",children:"this GitHub repository"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-an-example-application",children:"Setting Up an Example Application"}),"\n",(0,s.jsxs)(n.p,{children:["Before diving into testing, let's establish a baseline React application.\nFollowing the ",(0,s.jsx)(n.a,{href:"https://react.dev/learn/start-a-new-react-project",children:"recommended guidelines"}),",\nwe'll leverage ",(0,s.jsx)(n.a,{href:"https://nextjs.org/",children:"Next.js"})," as our framework of choice."]}),"\n",(0,s.jsxs)(n.p,{children:["We'll initialize a Next.js application in\n",(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/pages/api-reference/create-next-app#non-interactive",children:"non-interactive mode"}),",\nincorporating TypeScript and Tailwind CSS."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'npx create-next-app@latest next-sjs-ct-tutorial --ts --tailwind --eslint --app --src-dir --import-alias "@/*"\ncd next-sjs-ct-tutorial\nnpm run dev[def]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Once completed, your newly created Next.js application will be\naccessible at ",(0,s.jsx)(n.a,{href:"http://localhost:3000/",children:"http://localhost:3000/"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:"Mind the Node.js version",type:"info",children:[(0,s.jsxs)(n.p,{children:["Ensure that you've installed at least Node.js version 18.17.0 for Next.js,\nthe minimum required version by the time of writing.\nYou can manage Node.js versions using tools like ",(0,s.jsx)(n.a,{href:"https://volta.sh/",children:"Volta"}),".\nFor example, pinning the Node.js version to the latest available, currently 20.11.1,\ncan be achieved with:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'volta pin node@latest\ngit add .\ngit commit -m "Pinned Node.js version using Volta"\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"Now, let's enhance our basic page by creating a small application with the following\nuser story:"}),"\n",(0,s.jsxs)(n.admonition,{title:"User Story",type:"note",children:[(0,s.jsx)(n.p,{children:'As a user, I want to interact with a counter component that displays a count value and allows me to increase or decrease it within a specified range.\nThe component should feature two buttons: "Increase" and "Decrease."'}),(0,s.jsx)(n.p,{children:'When I click the "Increase" button, the displayed count value should increment, providing immediate visual feedback. Conversely, clicking the "Decrease" button should decrement the count value. However, these actions should be constrained within a defined range, preventing the count from exceeding a maximum of 10 and a minimum value of 0.'}),(0,s.jsx)(n.p,{children:"To ensure intuitive interaction, the buttons should visually indicate when they are disabled, preventing further increment or decrement operations beyond the defined range. This clear visual feedback helps me understand the available actions at a glance, enhancing my overall user experience with the counter component."})]}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"./src/components/Counter.tsx"})," file within your project to implement this\nfunctionality."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="./src/component/Counter.tsx"',children:'\'use client\'\n\nimport { useState } from "react"\n\nexport const Counter = () => {\n    // Define state variables for count and minimum/maximum values\n    const [count, setCount] = useState(0)\n    const minCount = 0\n    const maxCount = 10\n    \n    // Function to handle click on the "Increase" button\n    function onIncreaseButtonClick(): void {\n        // Check if count is less than maximum allowed count\n        if (count < maxCount) {\n            // Increment count by 1\n            setCount(count + 1)\n        }\n    }\n\n    // Function to handle click on the "Decrease" button\n    function onDecreaseButtonClick(): void {\n        // Check if count is greater than minimum allowed count\n        if (count > minCount) {\n            // Decrement count by 1\n            setCount(count - 1)\n        }\n    }\n\n    // Define button styles for normal, hover, and disabled states\n    const buttonStyle = "bg-blue-500 text-white font-bold py-2 px-4 rounded"\n    const hoverStyle = "hover:bg-blue-700"\n    const disabledButtonStyle = "bg-gray-400 cursor-not-allowed"\n\n    return (\n        <>\n          {/* Display the current count */}\n          <div className="flex space-x-2">\n            <div>Count:</div>\n            <div\n                data-testid="count">\n                {count}\n            </div>\n          </div>\n          {/* Render buttons for incrementing and decrementing the count */}\n          <div className="flex space-x-4">\n            {/* Increase button */}\n            <button \n                className={`${buttonStyle} ${count >= maxCount ? disabledButtonStyle : hoverStyle}`}\n                onClick={onIncreaseButtonClick}\n                disabled={count === maxCount}\n                data-testid="button-increase">\n                Increase\n            </button>\n            {/* Decrease button */}\n            <button \n                className={`${buttonStyle} ${count === minCount ? disabledButtonStyle : hoverStyle}`}\n                onClick={onDecreaseButtonClick}\n                disabled={count === minCount }\n                data-testid="button-decrease">\n                Decrease\n            </button>\n           </div>\n        </>\n    )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Update ",(0,s.jsx)(n.code,{children:"./src/app/page.tsx"})," to include the Counter component on the main page:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="./src/app/page.tsx"',children:'import { Counter } from "@/components/Counter";\n\nexport default function Home() {\n  return (\n    <main className="flex min-h-screen flex-col items-center p-24 space-y-4">\n      <Counter />\n    </main>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"With these changes, you can now utilize the increase/decrease counter\nfunctionality on your Next.js page."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'git add .\ngit commit -m "Implemented Counter"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integrating-playwright-and-serenityjs",children:"Integrating Playwright and Serenity/JS"}),"\n",(0,s.jsx)(n.p,{children:"Now, let's integrate the necessary dependencies for testing,\nincluding Playwright and Serenity/JS, along with associated packages\nfor assertions and reporting."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"npm install --save-dev \\\n  @serenity-js/assertions \\\n  @serenity-js/console-reporter \\\n  @serenity-js/core \\\n  @serenity-js/playwright \\\n  @serenity-js/playwright-test \\\n  @serenity-js/serenity-bdd \\\n  @serenity-js/web \\\n  @playwright/experimental-ct-react \\ \n  rimraf \\\n  npm-failsafe\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Update the ",(0,s.jsx)(n.code,{children:"package.json"})," file with scripts for cleaning, executing tests,\nand generating reports using Serenity/JS."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="./package.json"',children:'[...]\n\n"scripts": { \n\n    [...]\n\n    "clean": "rimraf dist target",\n    "serenity-bdd:update": "serenity-bdd update",\n    "test:ct": "failsafe clean serenity-bdd:update test:execute test:report",\n    "test:execute": "playwright test -c playwright-ct.config.ts",\n    "test:report": "serenity-bdd run --features ./src/components"\n}\n\n[\n\n...]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Define the Playwright configuration file ",(0,s.jsx)(n.code,{children:"playwright-ct.config.ts"}),", which includes\nsettings for test directories, reporters, browser configurations, and other options\nfor running the tests."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="./playwright-ct.config.ts"',children:"import { defineConfig, devices } from '@playwright/experimental-ct-react'\nimport { SerenityOptions } from '@serenity-js/playwright-test'\n\n/**\n * See https://playwright.dev/docs/test-configuration.\n */\nexport default defineConfig<SerenityOptions>({\n  testDir: './src/components',\n  /* The base directory, relative to the config file, for snapshot files created with toMatchSnapshot and toHaveScreenshot. */\n  snapshotDir: './__snapshots__',\n  /* Maximum time one test can run for. */\n  timeout: 10 * 1000,\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: [\n    [ 'line' ],\n    [ 'html', { open: 'never' } ],\n    [ '@serenity-js/playwright-test', {\n      crew: [\n        [ '@serenity-js/serenity-bdd', { specDirectory: './src/components' } ],\n        '@serenity-js/console-reporter',\n        [ '@serenity-js/core:ArtifactArchiver', { outputDirectory: './target/site/serenity' } ],\n        // [ '@serenity-js/core:StreamReporter', { outputFile: './target/events.ndjson' }]\n      ],\n    } ],\n  ],\n\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: 'on-first-retry',\n\n    /* Port to use for Playwright component endpoint. */\n    ctPort: 3100,\n\n    /* Set headless: false to see the browser window */\n    headless: true,\n\n    crew: [\n      [ '@serenity-js/web:Photographer', {\n        strategy: 'TakePhotosOfInteractions'\n      } ]\n    ],\n    defaultActorName: 'Tess',\n  },\n\n  /* Configure projects for major browsers */\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this code block, tasks and page elements for Serenity/JS\nare defined to ensure the functionality of the counter component.\nTasks include checking button states, verifying count values,\nand other assertions related to the counter component."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="./src/components/CounterSerenitiy.ts"',children:"import { Ensure, contain, equals, not } from \"@serenity-js/assertions\";\nimport { Task } from \"@serenity-js/core\";\nimport { By, PageElement, isEnabled, Text, CssClasses } from \"@serenity-js/web\";\n\nexport class CounterSerenity {\n    static CounterLabel = PageElement\n        .located(By.css('[data-testid=\"count\"]'))\n        .describedAs('label that shows the current count')\n\n    static IncreaseButton = PageElement\n        .located(By.css('[data-testid=\"button-increase\"]'))\n        .describedAs('button to increase the count')\n\n    static DecreaseButton = PageElement\n        .located(By.css('[data-testid=\"button-decrease\"]'))\n        .describedAs('button to decrease the count')\n\n    static EnsureIncreaseButtonIsEnabled = () =>\n        Task.where('#actor ensures that increase button is enabled',\n            Ensure.that(\n                CssClasses.of(this.IncreaseButton),\n                not(contain('cursor-not-allowed')))\n        )\n\n    static EnsureIncreaseButtonIsNotEnabled = () =>\n        Task.where('#actor ensures that increase button is not enabled',\n            Ensure.that(\n                CssClasses.of(this.IncreaseButton),\n                contain('cursor-not-allowed'))\n        )\n\n    static EnsureDecreaseButtonIsEnabled = () =>\n        Task.where('#actor ensures that decrease button is enabled',\n            Ensure.that(\n                CssClasses.of(this.DecreaseButton),\n                not(contain('cursor-not-allowed')))\n        )\n\n    static EnsureDecreaseButtonIsNotEnabled = () =>\n        Ensure.that(\n            CssClasses.of(this.DecreaseButton),\n            (contain('cursor-not-allowed'))\n        )\n\n    static EnsureCount = (count: string) =>\n        Task.where(`#actor ensures count label displays a value of ${count}`,\n            Ensure.that(Text.of(this.CounterLabel), equals(count)))\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This section contains the test specifications for the Counter component using\nPlaywright and Serenity/JS. Tests cover scenarios such as initial state verificatio\nand interactions to reach upper count limits while ensuring button states and count\nvalues are correctly maintained."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="./src/components/Counter.spec.tsx"',children:"import { test as componentTest } from '@playwright/experimental-ct-react'\nimport { useBase } from '@serenity-js/playwright-test'\nimport { Click, PageElement } from '@serenity-js/web'\nimport React from 'react'\nimport { Counter } from './Counter'\nimport { CounterSerenity } from './CounterSerenity'\nimport { Duration, Wait } from '@serenity-js/core'\n\n\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst { it, describe } = useBase(componentTest)\n\ndescribe('Counter', () => {\n\n    it('ensures initial state', async ({ mount, actor }) => {\n\n        const x = PageElement.from(await mount(\n            <Counter />\n        )).describedAs('counter component')\n\n        await actor.attemptsTo(\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\n            CounterSerenity.EnsureDecreaseButtonIsNotEnabled(),\n            CounterSerenity.EnsureCount('0')\n        )\n    })\n\n    it('ensures state after click to upper limit', async ({ mount, actor }) => {\n\n        const x = PageElement.from(await mount(\n            <Counter />\n        )).describedAs('counter component')\n\n        await actor.attemptsTo(\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\n            CounterSerenity.EnsureDecreaseButtonIsNotEnabled(),\n            CounterSerenity.EnsureCount('0'),\n            Click.on(CounterSerenity.IncreaseButton),\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\n            CounterSerenity.EnsureDecreaseButtonIsEnabled(),\n            CounterSerenity.EnsureCount('1'),\n            Click.on(CounterSerenity.IncreaseButton),\n            Click.on(CounterSerenity.IncreaseButton),\n            Click.on(CounterSerenity.IncreaseButton),\n            Click.on(CounterSerenity.IncreaseButton),\n            Click.on(CounterSerenity.IncreaseButton),\n            CounterSerenity.EnsureIncreaseButtonIsEnabled(),\n            CounterSerenity.EnsureDecreaseButtonIsEnabled(),\n            CounterSerenity.EnsureCount('6'),\n            Click.on(CounterSerenity.IncreaseButton),\n            Click.on(CounterSerenity.IncreaseButton),\n            Click.on(CounterSerenity.IncreaseButton),\n            Click.on(CounterSerenity.IncreaseButton),\n            CounterSerenity.EnsureCount('10'),\n            CounterSerenity.EnsureIncreaseButtonIsNotEnabled(),\n            CounterSerenity.EnsureDecreaseButtonIsEnabled(),\n        )\n    })\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Finally, include a basic HTML template ",(0,s.jsx)(n.code,{children:"index.html"})," for the testing page,\nand create an entry point (index.tsx) for rendering React components."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",metastring:'title="./playwright/index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Testing Page</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="index.tsx"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="./playwright/index.tsx"',children:"import '../src/app/globals.css'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With everything set up, you can run the tests using ",(0,s.jsx)(n.code,{children:"npm run test:ct"}),",\nand find the Serenity-BDD report under ",(0,s.jsx)(n.code,{children:"./target/site/serenity"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Before committing the latest changes, update your ",(0,s.jsx)(n.code,{children:".gitignore"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".gitignore"',children:"# serenity-js\n/target/site\n\n# playwright\n/playwright-report\n/playwright/.cache\n"})}),"\n",(0,s.jsx)(n.p,{children:"This concludes our tutorial on simplifying component testing with React/Next.js,\nPlaywright, and Serenity/JS. Happy testing!"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsxs)(n.p,{children:["You can find a set of templates at the\n",(0,s.jsx)(n.a,{href:"https://github.com/orgs/serenity-js/repositories",children:"Serenity/JS GitHub repositories page"}),",\nincluding a ",(0,s.jsx)(n.a,{href:"https://github.com/serenity-js/serenity-js-playwright-ct-react-template",children:"template for component testing with React"})]})]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},2418:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/SerenityJS-e0ac35fd94e6db4f0481afa86bf71b26.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);